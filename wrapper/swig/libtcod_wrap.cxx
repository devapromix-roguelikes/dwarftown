/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within Swig, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ITCODBspCallback swig_types[0]
#define SWIGTYPE_p_ITCODPathCallback swig_types[1]
#define SWIGTYPE_p_LuaCallback swig_types[2]
#define SWIGTYPE_p_LuaLineListener swig_types[3]
#define SWIGTYPE_p_LuaPathCallback swig_types[4]
#define SWIGTYPE_p_SWIGLUA_REF swig_types[5]
#define SWIGTYPE_p_TCODBsp swig_types[6]
#define SWIGTYPE_p_TCODCBackgroundHelpers swig_types[7]
#define SWIGTYPE_p_TCODColor swig_types[8]
#define SWIGTYPE_p_TCODConsole swig_types[9]
#define SWIGTYPE_p_TCODDijkstra swig_types[10]
#define SWIGTYPE_p_TCODHeightMap swig_types[11]
#define SWIGTYPE_p_TCODImage swig_types[12]
#define SWIGTYPE_p_TCODLine swig_types[13]
#define SWIGTYPE_p_TCODLineListener swig_types[14]
#define SWIGTYPE_p_TCODMap swig_types[15]
#define SWIGTYPE_p_TCODMouse swig_types[16]
#define SWIGTYPE_p_TCODNameGenerator swig_types[17]
#define SWIGTYPE_p_TCODNoise swig_types[18]
#define SWIGTYPE_p_TCODPath swig_types[19]
#define SWIGTYPE_p_TCODRandom swig_types[20]
#define SWIGTYPE_p_TCODSystem swig_types[21]
#define SWIGTYPE_p_TCODText swig_types[22]
#define SWIGTYPE_p_TCOD_alignment_t swig_types[23]
#define SWIGTYPE_p_TCOD_bkgnd_flag_t swig_types[24]
#define SWIGTYPE_p_TCOD_chars_t swig_types[25]
#define SWIGTYPE_p_TCOD_dice_t swig_types[26]
#define SWIGTYPE_p_TCOD_distribution_t swig_types[27]
#define SWIGTYPE_p_TCOD_font_flags_t swig_types[28]
#define SWIGTYPE_p_TCOD_fov_algorithm_t swig_types[29]
#define SWIGTYPE_p_TCOD_key_status_t swig_types[30]
#define SWIGTYPE_p_TCOD_key_t swig_types[31]
#define SWIGTYPE_p_TCOD_keycode_t swig_types[32]
#define SWIGTYPE_p_TCOD_mouse_t swig_types[33]
#define SWIGTYPE_p_TCOD_noise_type_t swig_types[34]
#define SWIGTYPE_p_TCOD_random_algo_t swig_types[35]
#define SWIGTYPE_p_TCOD_renderer_t swig_types[36]
#define SWIGTYPE_p_float swig_types[37]
#define SWIGTYPE_p_int swig_types[38]
#define SWIGTYPE_p_std__vectorT_char_p_t swig_types[39]
#define SWIGTYPE_p_unsigned_char swig_types[40]
#define SWIGTYPE_p_unsigned_int swig_types[41]
static swig_type_info *swig_types[43];
static swig_module_info swig_module = {swig_types, 42, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "libtcodlua"
#define SWIG_init      luaopen_libtcodlua
#define SWIG_init_user luaopen_libtcodlua_user

#define SWIG_LUACODE   luaopen_libtcodlua_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


#include "libtcod.hpp"
#include "BackgroundHelperFunctions.hpp"

#include <vector>
class TCODNameGenerator
{
	public:
		static void parse (const char * filename, TCODRandom * random = NULL)
		{
			TCOD_namegen_parse (filename, random ? random->data : NULL);
		}

		static char * generate (char * name, bool allocate = false)
		{
			return TCOD_namegen_generate (name, allocate);
		}

		static char * generateCustom (char * name, char * rule, bool allocate = false)
		{
			return TCOD_namegen_generate_custom (name, rule, allocate);
		}

		static std::vector<char*> getSets(void)
		{
			std::vector<char*> returnList;
			TCOD_list_t setList = TCOD_namegen_get_sets();
			for(int i = 0 ; i < TCOD_list_size(setList) ; ++i)
			{
			 	returnList.push_back((char*)TCOD_list_get(setList, i));
			}
			return returnList;
		}
		
		static void destroy (void)
		{
			TCOD_namegen_destroy ();
		}
};

TCOD_bkgnd_flag_t TCODBackgroundAlphaMask(TCOD_bkgnd_flag_t background)
{
	return (TCOD_bkgnd_flag_t)(background & 0xff);
}


#include <vector>


#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <stdexcept>

SWIGINTERN char *std_vector_Sl_char_Sm__Sg____getitem__(std::vector< char * > *self,unsigned int idx){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__getitem__()");
				return (*self)[idx];
			}
SWIGINTERN void std_vector_Sl_char_Sm__Sg____setitem__(std::vector< char * > *self,unsigned int idx,char *val){
				if (idx>=self->size())
					throw std::out_of_range("in vector::__setitem__()");
				(*self)[idx]=val;
			}

#ifdef __cplusplus	/* generic alloc/dealloc fns*/
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	new TYPE[LEN]
#define SWIG_FREE_ARRAY(PTR)		delete[] PTR;
#else
#define SWIG_ALLOC_ARRAY(TYPE,LEN) 	(TYPE *)malloc(LEN*sizeof(TYPE))
#define SWIG_FREE_ARRAY(PTR)		free(PTR);
#endif
/* counting the size of arrays:*/
SWIGINTERN int SWIG_itable_size(lua_State* L, int index)
{
	int n=0;
	while(1){
		lua_rawgeti(L,index,n+1);
		if (lua_isnil(L,-1))break;
		++n;
		lua_pop(L,1);
	}
	lua_pop(L,1);
	return n;
}

SWIGINTERN int SWIG_table_size(lua_State* L, int index)
{
	int n=0;
	lua_pushnil(L);  /* first key*/
	while (lua_next(L, index) != 0) {
		++n;
		lua_pop(L, 1);  /* removes `value'; keeps `key' for next iteration*/
	}
	return n;
}

/* super macro to declare array typemap helper fns */
#define SWIG_DECLARE_TYPEMAP_ARR_FN(NAME,TYPE)\
	SWIGINTERN int SWIG_read_##NAME##_num_array(lua_State* L,int index,TYPE *array,int size){\
		int i;\
		for (i = 0; i < size; i++) {\
			lua_rawgeti(L,index,i+1);\
			if (lua_isnumber(L,-1)){\
				array[i] = (TYPE)lua_tonumber(L,-1);\
			} else {\
				lua_pop(L,1);\
				return 0;\
			}\
			lua_pop(L,1);\
		}\
		return 1;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_fixed(lua_State* L, int index, int size){\
		TYPE *array;\
		if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {\
			lua_pushfstring(L,"expected a table of size %d",size);\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,size)){\
			lua_pushstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN TYPE* SWIG_get_##NAME##_num_array_var(lua_State* L, int index, int* size)\
	{\
		TYPE *array;\
		if (!lua_istable(L,index)) {\
			lua_pushstring(L,"expected a table");\
			return 0;\
		}\
		*size=SWIG_itable_size(L,index);\
		if (*size<1){\
			lua_pushstring(L,"table appears to be empty");\
			return 0;\
		}\
		array=SWIG_ALLOC_ARRAY(TYPE,*size);\
		if (!SWIG_read_##NAME##_num_array(L,index,array,*size)){\
			lua_pushstring(L,"table must contain numbers");\
			SWIG_FREE_ARRAY(array);\
			return 0;\
		}\
		return array;\
	}\
	SWIGINTERN void SWIG_write_##NAME##_num_array(lua_State* L,TYPE *array,int size){\
		int i;\
		lua_newtable(L);\
		for (i = 0; i < size; i++){\
			lua_pushnumber(L,(lua_Number)array[i]);\
			lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/ \
		}\
	}

SWIG_DECLARE_TYPEMAP_ARR_FN(int,int);
SWIG_DECLARE_TYPEMAP_ARR_FN(uint,unsigned int);
SWIG_DECLARE_TYPEMAP_ARR_FN(short,short);
SWIG_DECLARE_TYPEMAP_ARR_FN(ushort,unsigned short);
SWIG_DECLARE_TYPEMAP_ARR_FN(long,long);
SWIG_DECLARE_TYPEMAP_ARR_FN(ulong,unsigned long);
SWIG_DECLARE_TYPEMAP_ARR_FN(float,float);
SWIG_DECLARE_TYPEMAP_ARR_FN(double,double);

SWIGINTERN int SWIG_read_ptr_array(lua_State* L,int index,void **array,int size,swig_type_info *type){
	int i;
	for (i = 0; i < size; i++) {
		lua_rawgeti(L,index,i+1);
		if (!lua_isuserdata(L,-1) || SWIG_ConvertPtr(L,-1,&array[i],type,0)==-1){
			lua_pop(L,1);
			return 0;
		}
		lua_pop(L,1);
	}
	return 1;
}
SWIGINTERN void** SWIG_get_ptr_array_fixed(lua_State* L, int index, int size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index) || SWIG_itable_size(L,index) != size) {
		lua_pushfstring(L,"expected a table of size %d",size);
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,size);
	if (!SWIG_read_ptr_array(L,index,array,size,type)){
		lua_pushfstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void** SWIG_get_ptr_array_var(lua_State* L, int index, int* size,swig_type_info *type){
	void **array;
	if (!lua_istable(L,index)) {
		lua_pushstring(L,"expected a table");
		return 0;
	}
	*size=SWIG_itable_size(L,index);
	if (*size<1){
		lua_pushstring(L,"table appears to be empty");
		return 0;
	}
	array=SWIG_ALLOC_ARRAY(void*,*size);
	if (!SWIG_read_ptr_array(L,index,array,*size,type)){
		lua_pushfstring(L,"table must contain pointers of type %s",type->name);
		SWIG_FREE_ARRAY(array);
		return 0;
	}
	return array;
}
SWIGINTERN void SWIG_write_ptr_array(lua_State* L,void **array,int size,swig_type_info *type,int own){
	int i;
	lua_newtable(L);
	for (i = 0; i < size; i++){
		SWIG_NewPointerObj(L,array[i],type,own);
		lua_rawseti(L,-2,i+1);/* -1 is the number, -2 is the table*/
	}
}


typedef struct{
  lua_State* L; /* the state */
  int idx;      /* the index on the stack */
}SWIGLUA_FN;

#define SWIGLUA_FN_GET(fn) {lua_pushvalue(fn.L,fn.idx);}


typedef struct{
  lua_State* L; /* the state */
  int ref;      /* a ref in the lua global index */
}SWIGLUA_REF;


void swiglua_ref_clear(SWIGLUA_REF* pref){
 	if (pref->L!=0 && pref->ref!=LUA_NOREF && pref->ref!=LUA_REFNIL){
		luaL_unref(pref->L,LUA_REGISTRYINDEX,pref->ref);
	}
	pref->L=0; pref->ref=0;
}

void swiglua_ref_set(SWIGLUA_REF* pref,lua_State* L,int idx){
//	swiglua_ref_clear(pref); /* just in case */
	pref->L=L;
	lua_pushvalue(L,idx);                 /* copy obj to top */
	pref->ref=luaL_ref(L,LUA_REGISTRYINDEX); /* remove obj from top & put into registry */
}

void swiglua_ref_get(SWIGLUA_REF* pref){
	if (pref->L!=0)
		lua_rawgeti(pref->L,LUA_REGISTRYINDEX,pref->ref);
}



#include "LuaCallbacks.hpp"

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_TCODNameGenerator_parse__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  TCODRandom *arg2 = (TCODRandom *) 0 ;
  
  SWIG_check_num_args("TCODNameGenerator::parse",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODNameGenerator::parse",1,"char const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TCODNameGenerator::parse",2,"TCODRandom *");
  arg1 = (char *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODNameGenerator_parse",2,SWIGTYPE_p_TCODRandom);
  }
  
  TCODNameGenerator::parse((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNameGenerator_parse__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("TCODNameGenerator::parse",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODNameGenerator::parse",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  TCODNameGenerator::parse((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNameGenerator_parse(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_TCODNameGenerator_parse__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TCODNameGenerator_parse__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODNameGenerator_parse'\n"
    "  Possible C/C++ prototypes are:\n"
    "    parse(char const *,TCODRandom *)\n"
    "    TCODNameGenerator::parse(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODNameGenerator_generate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TCODNameGenerator::generate",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODNameGenerator::generate",1,"char *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("TCODNameGenerator::generate",2,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (char *)TCODNameGenerator::generate(arg1,arg2);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNameGenerator_generate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TCODNameGenerator::generate",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODNameGenerator::generate",1,"char *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (char *)TCODNameGenerator::generate(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNameGenerator_generate(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_TCODNameGenerator_generate__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TCODNameGenerator_generate__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODNameGenerator_generate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    generate(char *,bool)\n"
    "    TCODNameGenerator::generate(char *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODNameGenerator_generateCustom__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TCODNameGenerator::generateCustom",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODNameGenerator::generateCustom",1,"char *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TCODNameGenerator::generateCustom",2,"char *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("TCODNameGenerator::generateCustom",3,"bool");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (char *)TCODNameGenerator::generateCustom(arg1,arg2,arg3);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNameGenerator_generateCustom__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TCODNameGenerator::generateCustom",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODNameGenerator::generateCustom",1,"char *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("TCODNameGenerator::generateCustom",2,"char *");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (char *)TCODNameGenerator::generateCustom(arg1,arg2);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNameGenerator_generateCustom(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TCODNameGenerator_generateCustom__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_TCODNameGenerator_generateCustom__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODNameGenerator_generateCustom'\n"
    "  Possible C/C++ prototypes are:\n"
    "    generateCustom(char *,char *,bool)\n"
    "    TCODNameGenerator::generateCustom(char *,char *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODNameGenerator_getSets(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > result;
  
  SWIG_check_num_args("TCODNameGenerator::getSets",0,0)
  result = TCODNameGenerator::getSets();
  {
    std::vector< char * > * resultptr = new std::vector< char * >((const std::vector< char * > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_char_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNameGenerator_destroy(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("TCODNameGenerator::destroy",0,0)
  TCODNameGenerator::destroy();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODNameGenerator(lua_State* L) {
  int SWIG_arg = 0;
  TCODNameGenerator *result = 0 ;
  
  SWIG_check_num_args("TCODNameGenerator::TCODNameGenerator",0,0)
  result = (TCODNameGenerator *)new TCODNameGenerator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODNameGenerator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODNameGenerator(void *obj) {
TCODNameGenerator *arg1 = (TCODNameGenerator *) obj;
delete arg1;
}
static swig_lua_method swig_TCODNameGenerator_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TCODNameGenerator_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODNameGenerator_bases[] = {0};
static const char *swig_TCODNameGenerator_base_names[] = {0};
static swig_lua_class _wrap_class_TCODNameGenerator = { "TCODNameGenerator", &SWIGTYPE_p_TCODNameGenerator,_wrap_new_TCODNameGenerator, swig_delete_TCODNameGenerator, swig_TCODNameGenerator_methods, swig_TCODNameGenerator_attributes, swig_TCODNameGenerator_bases, swig_TCODNameGenerator_base_names };

static int _wrap_new_StringVector__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > *result = 0 ;
  
  SWIG_check_num_args("std::vector<(p.char)>",0,0)
  result = (std::vector< char * > *)new std::vector< char * >();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  std::vector< char * > *result = 0 ;
  
  SWIG_check_num_args("std::vector<(p.char)>",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector<(p.char)>",1,"unsigned int");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  result = (std::vector< char * > *)new std::vector< char * >(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > *arg1 = 0 ;
  std::vector< char * > *result = 0 ;
  
  SWIG_check_num_args("std::vector<(p.char)>",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("std::vector<(p.char)>",1,"std::vector< char * > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_p_t,0))){
    SWIG_fail_ptr("new_StringVector",1,SWIGTYPE_p_std__vectorT_char_p_t);
  }
  
  result = (std::vector< char * > *)new std::vector< char * >((std::vector< char * > const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  std::vector< char * > *result = 0 ;
  
  SWIG_check_num_args("std::vector<(p.char)>",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("std::vector<(p.char)>",1,"unsigned int");
  if(!lua_isstring(L,2)) SWIG_fail_arg("std::vector<(p.char)>",2,"char *");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned int)lua_tonumber(L, 1);
  arg2 = (char *)lua_tostring(L, 2);
  result = (std::vector< char * > *)new std::vector< char * >(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_char_p_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_StringVector(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_StringVector__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__vectorT_char_p_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_StringVector__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_StringVector__SWIG_3(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_StringVector'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char * >()\n"
    "    std::vector< char * >(unsigned int)\n"
    "    std::vector< char * >(std::vector< char * > const &)\n"
    "    std::vector< char * >(unsigned int,char *)\n");
  lua_error(L);return 0;
}


static int _wrap_StringVector_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > *arg1 = (std::vector< char * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"std::vector< char * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_p_t,0))){
    SWIG_fail_ptr("StringVector_size",1,SWIGTYPE_p_std__vectorT_char_p_t);
  }
  
  result = (unsigned int)((std::vector< char * > const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_max_size(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > *arg1 = (std::vector< char * > *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("max_size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("max_size",1,"std::vector< char * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_p_t,0))){
    SWIG_fail_ptr("StringVector_max_size",1,SWIGTYPE_p_std__vectorT_char_p_t);
  }
  
  result = (unsigned int)((std::vector< char * > const *)arg1)->max_size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > *arg1 = (std::vector< char * > *) 0 ;
  bool result;
  
  SWIG_check_num_args("empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("empty",1,"std::vector< char * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_p_t,0))){
    SWIG_fail_ptr("StringVector_empty",1,SWIGTYPE_p_std__vectorT_char_p_t);
  }
  
  result = (bool)((std::vector< char * > const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_clear(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > *arg1 = (std::vector< char * > *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"std::vector< char * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_p_t,0))){
    SWIG_fail_ptr("StringVector_clear",1,SWIGTYPE_p_std__vectorT_char_p_t);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_push_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > *arg1 = (std::vector< char * > *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("push_back",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("push_back",1,"std::vector< char * > *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("push_back",2,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_p_t,0))){
    SWIG_fail_ptr("StringVector_push_back",1,SWIGTYPE_p_std__vectorT_char_p_t);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->push_back(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_pop_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > *arg1 = (std::vector< char * > *) 0 ;
  
  SWIG_check_num_args("pop_back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pop_back",1,"std::vector< char * > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_p_t,0))){
    SWIG_fail_ptr("StringVector_pop_back",1,SWIGTYPE_p_std__vectorT_char_p_t);
  }
  
  (arg1)->pop_back();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_front(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > *arg1 = (std::vector< char * > *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("front",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("front",1,"std::vector< char * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_p_t,0))){
    SWIG_fail_ptr("StringVector_front",1,SWIGTYPE_p_std__vectorT_char_p_t);
  }
  
  result = (char *)((std::vector< char * > const *)arg1)->front();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector_back(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > *arg1 = (std::vector< char * > *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("back",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("back",1,"std::vector< char * > const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_p_t,0))){
    SWIG_fail_ptr("StringVector_back",1,SWIGTYPE_p_std__vectorT_char_p_t);
  }
  
  result = (char *)((std::vector< char * > const *)arg1)->back();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector___getitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > *arg1 = (std::vector< char * > *) 0 ;
  unsigned int arg2 ;
  char *result = 0 ;
  
  SWIG_check_num_args("__getitem__",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("__getitem__",1,"std::vector< char * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("__getitem__",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_p_t,0))){
    SWIG_fail_ptr("StringVector___getitem",1,SWIGTYPE_p_std__vectorT_char_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  try {
    result = (char *)std_vector_Sl_char_Sm__Sg____getitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StringVector___setitem(lua_State* L) {
  int SWIG_arg = 0;
  std::vector< char * > *arg1 = (std::vector< char * > *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("__setitem__",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("__setitem__",1,"std::vector< char * > *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("__setitem__",2,"unsigned int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("__setitem__",3,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__vectorT_char_p_t,0))){
    SWIG_fail_ptr("StringVector___setitem",1,SWIGTYPE_p_std__vectorT_char_p_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  try {
    std_vector_Sl_char_Sm__Sg____setitem__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception(SWIG_IndexError, (&_e)->what());
  }
  
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_StringVector(void *obj) {
std::vector< char * > *arg1 = (std::vector< char * > *) obj;
delete arg1;
}
static swig_lua_method swig_std_vector_Sl_char_Sm__Sg__methods[] = {
    {"size", _wrap_StringVector_size}, 
    {"max_size", _wrap_StringVector_max_size}, 
    {"empty", _wrap_StringVector_empty}, 
    {"clear", _wrap_StringVector_clear}, 
    {"push_back", _wrap_StringVector_push_back}, 
    {"pop_back", _wrap_StringVector_pop_back}, 
    {"front", _wrap_StringVector_front}, 
    {"back", _wrap_StringVector_back}, 
    {"__getitem", _wrap_StringVector___getitem}, 
    {"__setitem", _wrap_StringVector___setitem}, 
    {0,0}
};
static swig_lua_attribute swig_std_vector_Sl_char_Sm__Sg__attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_std_vector_Sl_char_Sm__Sg__bases[] = {0};
static const char *swig_std_vector_Sl_char_Sm__Sg__base_names[] = {0};
static swig_lua_class _wrap_class_std_vector_Sl_char_Sm__Sg_ = { "StringVector", &SWIGTYPE_p_std__vectorT_char_p_t,_wrap_new_StringVector, swig_delete_StringVector, swig_std_vector_Sl_char_Sm__Sg__methods, swig_std_vector_Sl_char_Sm__Sg__attributes, swig_std_vector_Sl_char_Sm__Sg__bases, swig_std_vector_Sl_char_Sm__Sg__base_names };

static int _wrap_TCODBackgroundAlphaMask(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_bkgnd_flag_t arg1 ;
  TCOD_bkgnd_flag_t result;
  
  SWIG_check_num_args("TCODBackgroundAlphaMask",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODBackgroundAlphaMask",1,"TCOD_bkgnd_flag_t");
  arg1 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 1);
  result = (TCOD_bkgnd_flag_t)TCODBackgroundAlphaMask(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODPath__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  float arg2 ;
  TCODPath *result = 0 ;
  
  SWIG_check_num_args("TCODPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCODPath",1,"TCODMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODPath",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("new_TCODPath",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (TCODPath *)new TCODPath((TCODMap const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODPath,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODPath__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  TCODPath *result = 0 ;
  
  SWIG_check_num_args("TCODPath",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCODPath",1,"TCODMap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("new_TCODPath",1,SWIGTYPE_p_TCODMap);
  }
  
  result = (TCODPath *)new TCODPath((TCODMap const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODPath,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODPath__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  ITCODPathCallback *arg3 = (ITCODPathCallback *) 0 ;
  void *arg4 = (void *) 0 ;
  float arg5 ;
  TCODPath *result = 0 ;
  
  SWIG_check_num_args("TCODPath",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODPath",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODPath",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TCODPath",3,"ITCODPathCallback const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TCODPath",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TCODPath",5,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ITCODPathCallback,0))){
    SWIG_fail_ptr("new_TCODPath",3,SWIGTYPE_p_ITCODPathCallback);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"new_TCODPath");
  arg5 = (float)lua_tonumber(L, 5);
  result = (TCODPath *)new TCODPath(arg1,arg2,(ITCODPathCallback const *)arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODPath,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODPath__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  ITCODPathCallback *arg3 = (ITCODPathCallback *) 0 ;
  void *arg4 = (void *) 0 ;
  TCODPath *result = 0 ;
  
  SWIG_check_num_args("TCODPath",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODPath",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODPath",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TCODPath",3,"ITCODPathCallback const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TCODPath",4,"void *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ITCODPathCallback,0))){
    SWIG_fail_ptr("new_TCODPath",3,SWIGTYPE_p_ITCODPathCallback);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"new_TCODPath");
  result = (TCODPath *)new TCODPath(arg1,arg2,(ITCODPathCallback const *)arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODPath,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODPath(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TCODPath__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TCODPath__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ITCODPathCallback, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_TCODPath__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ITCODPathCallback, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_TCODPath__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TCODPath'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TCODPath(TCODMap const *,float)\n"
    "    TCODPath(TCODMap const *)\n"
    "    TCODPath(int,int,ITCODPathCallback const *,void *,float)\n"
    "    TCODPath(int,int,ITCODPathCallback const *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODPath_compute(lua_State* L) {
  int SWIG_arg = 0;
  TCODPath *arg1 = (TCODPath *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  SWIG_check_num_args("compute",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("compute",1,"TCODPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("compute",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("compute",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("compute",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("compute",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODPath,0))){
    SWIG_fail_ptr("TCODPath_compute",1,SWIGTYPE_p_TCODPath);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (bool)(arg1)->compute(arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODPath_walk(lua_State* L) {
  int SWIG_arg = 0;
  TCODPath *arg1 = (TCODPath *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  bool arg4 ;
  int temp2 ;
  int temp3 ;
  bool result;
  
  SWIG_check_num_args("walk",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("walk",1,"TCODPath *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("walk",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("walk",3,"int *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("walk",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODPath,0))){
    SWIG_fail_ptr("TCODPath_walk",1,SWIGTYPE_p_TCODPath);
  }
  
  temp2 = (int)lua_tonumber(L,2);
  arg2 = &temp2; 
  temp3 = (int)lua_tonumber(L,3);
  arg3 = &temp3; 
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->walk(arg2,arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg3); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODPath_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  TCODPath *arg1 = (TCODPath *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmpty",1,"TCODPath const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODPath,0))){
    SWIG_fail_ptr("TCODPath_isEmpty",1,SWIGTYPE_p_TCODPath);
  }
  
  result = (bool)((TCODPath const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODPath_size(lua_State* L) {
  int SWIG_arg = 0;
  TCODPath *arg1 = (TCODPath *) 0 ;
  int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"TCODPath const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODPath,0))){
    SWIG_fail_ptr("TCODPath_size",1,SWIGTYPE_p_TCODPath);
  }
  
  result = (int)((TCODPath const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODPath_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODPath *arg1 = (TCODPath *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int temp3 ;
  int temp4 ;
  
  arg3 = &temp3; 
  arg4 = &temp4; 
  SWIG_check_num_args("get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get",1,"TCODPath const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODPath,0))){
    SWIG_fail_ptr("TCODPath_get",1,SWIGTYPE_p_TCODPath);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  ((TCODPath const *)arg1)->get(arg2,arg3,arg4);
  
  lua_pushnumber(L, (lua_Number) *arg3); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg4); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODPath_getOrigin(lua_State* L) {
  int SWIG_arg = 0;
  TCODPath *arg1 = (TCODPath *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  
  arg2 = &temp2; 
  arg3 = &temp3; 
  SWIG_check_num_args("getOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getOrigin",1,"TCODPath const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODPath,0))){
    SWIG_fail_ptr("TCODPath_getOrigin",1,SWIGTYPE_p_TCODPath);
  }
  
  ((TCODPath const *)arg1)->getOrigin(arg2,arg3);
  
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg3); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODPath_getDestination(lua_State* L) {
  int SWIG_arg = 0;
  TCODPath *arg1 = (TCODPath *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  
  arg2 = &temp2; 
  arg3 = &temp3; 
  SWIG_check_num_args("getDestination",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDestination",1,"TCODPath const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODPath,0))){
    SWIG_fail_ptr("TCODPath_getDestination",1,SWIGTYPE_p_TCODPath);
  }
  
  ((TCODPath const *)arg1)->getDestination(arg2,arg3);
  
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg3); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODPath(void *obj) {
TCODPath *arg1 = (TCODPath *) obj;
delete arg1;
}
static swig_lua_method swig_TCODPath_methods[] = {
    {"compute", _wrap_TCODPath_compute}, 
    {"walk", _wrap_TCODPath_walk}, 
    {"isEmpty", _wrap_TCODPath_isEmpty}, 
    {"size", _wrap_TCODPath_size}, 
    {"get", _wrap_TCODPath_get}, 
    {"getOrigin", _wrap_TCODPath_getOrigin}, 
    {"getDestination", _wrap_TCODPath_getDestination}, 
    {0,0}
};
static swig_lua_attribute swig_TCODPath_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODPath_bases[] = {0};
static const char *swig_TCODPath_base_names[] = {0};
static swig_lua_class _wrap_class_TCODPath = { "TCODPath", &SWIGTYPE_p_TCODPath,_wrap_new_TCODPath, swig_delete_TCODPath, swig_TCODPath_methods, swig_TCODPath_attributes, swig_TCODPath_bases, swig_TCODPath_base_names };

static int _wrap_new_TCODDijkstra__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  float arg2 ;
  TCODDijkstra *result = 0 ;
  
  SWIG_check_num_args("TCODDijkstra",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCODDijkstra",1,"TCODMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODDijkstra",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("new_TCODDijkstra",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (TCODDijkstra *)new TCODDijkstra(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODDijkstra,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODDijkstra__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  TCODDijkstra *result = 0 ;
  
  SWIG_check_num_args("TCODDijkstra",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCODDijkstra",1,"TCODMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("new_TCODDijkstra",1,SWIGTYPE_p_TCODMap);
  }
  
  result = (TCODDijkstra *)new TCODDijkstra(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODDijkstra,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODDijkstra__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  ITCODPathCallback *arg3 = (ITCODPathCallback *) 0 ;
  void *arg4 = (void *) 0 ;
  float arg5 ;
  TCODDijkstra *result = 0 ;
  
  SWIG_check_num_args("TCODDijkstra",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODDijkstra",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODDijkstra",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TCODDijkstra",3,"ITCODPathCallback const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TCODDijkstra",4,"void *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TCODDijkstra",5,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ITCODPathCallback,0))){
    SWIG_fail_ptr("new_TCODDijkstra",3,SWIGTYPE_p_ITCODPathCallback);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"new_TCODDijkstra");
  arg5 = (float)lua_tonumber(L, 5);
  result = (TCODDijkstra *)new TCODDijkstra(arg1,arg2,(ITCODPathCallback const *)arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODDijkstra,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODDijkstra__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  ITCODPathCallback *arg3 = (ITCODPathCallback *) 0 ;
  void *arg4 = (void *) 0 ;
  TCODDijkstra *result = 0 ;
  
  SWIG_check_num_args("TCODDijkstra",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODDijkstra",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODDijkstra",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("TCODDijkstra",3,"ITCODPathCallback const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TCODDijkstra",4,"void *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_ITCODPathCallback,0))){
    SWIG_fail_ptr("new_TCODDijkstra",3,SWIGTYPE_p_ITCODPathCallback);
  }
  
  arg4=(void *)SWIG_MustGetPtr(L,4,0,0,4,"new_TCODDijkstra");
  result = (TCODDijkstra *)new TCODDijkstra(arg1,arg2,(ITCODPathCallback const *)arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODDijkstra,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODDijkstra(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TCODDijkstra__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TCODDijkstra__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ITCODPathCallback, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_TCODDijkstra__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_ITCODPathCallback, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, 0, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_TCODDijkstra__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TCODDijkstra'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TCODDijkstra(TCODMap *,float)\n"
    "    TCODDijkstra(TCODMap *)\n"
    "    TCODDijkstra(int,int,ITCODPathCallback const *,void *,float)\n"
    "    TCODDijkstra(int,int,ITCODPathCallback const *,void *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODDijkstra_compute(lua_State* L) {
  int SWIG_arg = 0;
  TCODDijkstra *arg1 = (TCODDijkstra *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("compute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("compute",1,"TCODDijkstra *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("compute",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("compute",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODDijkstra,0))){
    SWIG_fail_ptr("TCODDijkstra_compute",1,SWIGTYPE_p_TCODDijkstra);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->compute(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODDijkstra_getDistance(lua_State* L) {
  int SWIG_arg = 0;
  TCODDijkstra *arg1 = (TCODDijkstra *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("getDistance",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDistance",1,"TCODDijkstra *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDistance",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getDistance",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODDijkstra,0))){
    SWIG_fail_ptr("TCODDijkstra_getDistance",1,SWIGTYPE_p_TCODDijkstra);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)(arg1)->getDistance(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODDijkstra_setPath(lua_State* L) {
  int SWIG_arg = 0;
  TCODDijkstra *arg1 = (TCODDijkstra *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("setPath",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPath",1,"TCODDijkstra *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setPath",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setPath",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODDijkstra,0))){
    SWIG_fail_ptr("TCODDijkstra_setPath",1,SWIGTYPE_p_TCODDijkstra);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->setPath(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODDijkstra_walk(lua_State* L) {
  int SWIG_arg = 0;
  TCODDijkstra *arg1 = (TCODDijkstra *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  bool result;
  
  SWIG_check_num_args("walk",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("walk",1,"TCODDijkstra *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("walk",2,"int *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("walk",3,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODDijkstra,0))){
    SWIG_fail_ptr("TCODDijkstra_walk",1,SWIGTYPE_p_TCODDijkstra);
  }
  
  temp2 = (int)lua_tonumber(L,2);
  arg2 = &temp2; 
  temp3 = (int)lua_tonumber(L,3);
  arg3 = &temp3; 
  result = (bool)(arg1)->walk(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg3); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODDijkstra_isEmpty(lua_State* L) {
  int SWIG_arg = 0;
  TCODDijkstra *arg1 = (TCODDijkstra *) 0 ;
  bool result;
  
  SWIG_check_num_args("isEmpty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isEmpty",1,"TCODDijkstra const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODDijkstra,0))){
    SWIG_fail_ptr("TCODDijkstra_isEmpty",1,SWIGTYPE_p_TCODDijkstra);
  }
  
  result = (bool)((TCODDijkstra const *)arg1)->isEmpty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODDijkstra_size(lua_State* L) {
  int SWIG_arg = 0;
  TCODDijkstra *arg1 = (TCODDijkstra *) 0 ;
  int result;
  
  SWIG_check_num_args("size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("size",1,"TCODDijkstra const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODDijkstra,0))){
    SWIG_fail_ptr("TCODDijkstra_size",1,SWIGTYPE_p_TCODDijkstra);
  }
  
  result = (int)((TCODDijkstra const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODDijkstra_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODDijkstra *arg1 = (TCODDijkstra *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int temp3 ;
  int temp4 ;
  
  arg3 = &temp3; 
  arg4 = &temp4; 
  SWIG_check_num_args("get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get",1,"TCODDijkstra const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("get",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODDijkstra,0))){
    SWIG_fail_ptr("TCODDijkstra_get",1,SWIGTYPE_p_TCODDijkstra);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  ((TCODDijkstra const *)arg1)->get(arg2,arg3,arg4);
  
  lua_pushnumber(L, (lua_Number) *arg3); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg4); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODDijkstra(void *obj) {
TCODDijkstra *arg1 = (TCODDijkstra *) obj;
delete arg1;
}
static swig_lua_method swig_TCODDijkstra_methods[] = {
    {"compute", _wrap_TCODDijkstra_compute}, 
    {"getDistance", _wrap_TCODDijkstra_getDistance}, 
    {"setPath", _wrap_TCODDijkstra_setPath}, 
    {"walk", _wrap_TCODDijkstra_walk}, 
    {"isEmpty", _wrap_TCODDijkstra_isEmpty}, 
    {"size", _wrap_TCODDijkstra_size}, 
    {"get", _wrap_TCODDijkstra_get}, 
    {0,0}
};
static swig_lua_attribute swig_TCODDijkstra_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODDijkstra_bases[] = {0};
static const char *swig_TCODDijkstra_base_names[] = {0};
static swig_lua_class _wrap_class_TCODDijkstra = { "TCODDijkstra", &SWIGTYPE_p_TCODDijkstra,_wrap_new_TCODDijkstra, swig_delete_TCODDijkstra, swig_TCODDijkstra_methods, swig_TCODDijkstra_attributes, swig_TCODDijkstra_bases, swig_TCODDijkstra_base_names };

static int _wrap_TCODLineListener_putPoint(lua_State* L) {
  int SWIG_arg = 0;
  TCODLineListener *arg1 = (TCODLineListener *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("putPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("putPoint",1,"TCODLineListener *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("putPoint",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("putPoint",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODLineListener,0))){
    SWIG_fail_ptr("TCODLineListener_putPoint",1,SWIGTYPE_p_TCODLineListener);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->putPoint(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODLineListener(void *obj) {
TCODLineListener *arg1 = (TCODLineListener *) obj;
delete arg1;
}
static swig_lua_method swig_TCODLineListener_methods[] = {
    {"putPoint", _wrap_TCODLineListener_putPoint}, 
    {0,0}
};
static swig_lua_attribute swig_TCODLineListener_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODLineListener_bases[] = {0};
static const char *swig_TCODLineListener_base_names[] = {0};
static swig_lua_class _wrap_class_TCODLineListener = { "TCODLineListener", &SWIGTYPE_p_TCODLineListener,0, swig_delete_TCODLineListener, swig_TCODLineListener_methods, swig_TCODLineListener_attributes, swig_TCODLineListener_bases, swig_TCODLineListener_base_names };

static int _wrap_TCODLine_init(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("TCODLine::init",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODLine::init",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODLine::init",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODLine::init",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TCODLine::init",4,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  TCODLine::init(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODLine_step(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int temp1 ;
  int temp2 ;
  bool result;
  
  SWIG_check_num_args("TCODLine::step",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODLine::step",1,"int *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODLine::step",2,"int *");
  temp1 = (int)lua_tonumber(L,1);
  arg1 = &temp1; 
  temp2 = (int)lua_tonumber(L,2);
  arg2 = &temp2; 
  result = (bool)TCODLine::step(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg1); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODLine_line(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TCODLineListener *arg5 = (TCODLineListener *) 0 ;
  bool result;
  
  SWIG_check_num_args("TCODLine::line",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODLine::line",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODLine::line",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODLine::line",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TCODLine::line",4,"int");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("TCODLine::line",5,"TCODLineListener *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_TCODLineListener,0))){
    SWIG_fail_ptr("TCODLine_line",5,SWIGTYPE_p_TCODLineListener);
  }
  
  result = (bool)TCODLine::line(arg1,arg2,arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODLine(lua_State* L) {
  int SWIG_arg = 0;
  TCODLine *result = 0 ;
  
  SWIG_check_num_args("TCODLine::TCODLine",0,0)
  result = (TCODLine *)new TCODLine();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODLine,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODLine(void *obj) {
TCODLine *arg1 = (TCODLine *) obj;
delete arg1;
}
static swig_lua_method swig_TCODLine_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TCODLine_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODLine_bases[] = {0};
static const char *swig_TCODLine_base_names[] = {0};
static swig_lua_class _wrap_class_TCODLine = { "TCODLine", &SWIGTYPE_p_TCODLine,_wrap_new_TCODLine, swig_delete_TCODLine, swig_TCODLine_methods, swig_TCODLine_attributes, swig_TCODLine_bases, swig_TCODLine_base_names };

static int _wrap_ITCODPathCallback_getWalkCost(lua_State* L) {
  int SWIG_arg = 0;
  ITCODPathCallback *arg1 = (ITCODPathCallback *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  float result;
  
  SWIG_check_num_args("getWalkCost",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWalkCost",1,"ITCODPathCallback const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getWalkCost",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getWalkCost",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getWalkCost",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getWalkCost",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("getWalkCost",6,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ITCODPathCallback,0))){
    SWIG_fail_ptr("ITCODPathCallback_getWalkCost",1,SWIGTYPE_p_ITCODPathCallback);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"ITCODPathCallback_getWalkCost");
  result = (float)((ITCODPathCallback const *)arg1)->getWalkCost(arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ITCODPathCallback(void *obj) {
ITCODPathCallback *arg1 = (ITCODPathCallback *) obj;
delete arg1;
}
static swig_lua_method swig_ITCODPathCallback_methods[] = {
    {"getWalkCost", _wrap_ITCODPathCallback_getWalkCost}, 
    {0,0}
};
static swig_lua_attribute swig_ITCODPathCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ITCODPathCallback_bases[] = {0};
static const char *swig_ITCODPathCallback_base_names[] = {0};
static swig_lua_class _wrap_class_ITCODPathCallback = { "ITCODPathCallback", &SWIGTYPE_p_ITCODPathCallback,0, swig_delete_ITCODPathCallback, swig_ITCODPathCallback_methods, swig_ITCODPathCallback_attributes, swig_ITCODPathCallback_bases, swig_ITCODPathCallback_base_names };

static void swig_delete_LuaCallback(void *obj) {
LuaCallback *arg1 = (LuaCallback *) obj;
delete arg1;
}
static swig_lua_method swig_LuaCallback_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_LuaCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LuaCallback_bases[] = {0};
static const char *swig_LuaCallback_base_names[] = {0};
static swig_lua_class _wrap_class_LuaCallback = { "LuaCallback", &SWIGTYPE_p_LuaCallback,0, swig_delete_LuaCallback, swig_LuaCallback_methods, swig_LuaCallback_attributes, swig_LuaCallback_bases, swig_LuaCallback_base_names };

static int _wrap_new_TCODLine_Listener(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  LuaLineListener *result = 0 ;
  
  SWIG_check_num_args("LuaLineListener",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = (LuaLineListener *)new LuaLineListener(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaLineListener,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODLine_Listener_putPoint(lua_State* L) {
  int SWIG_arg = 0;
  LuaLineListener *arg1 = (LuaLineListener *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("putPoint",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("putPoint",1,"LuaLineListener *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("putPoint",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("putPoint",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaLineListener,0))){
    SWIG_fail_ptr("TCODLine_Listener_putPoint",1,SWIGTYPE_p_LuaLineListener);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)(arg1)->putPoint(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODLine_Listener(void *obj) {
LuaLineListener *arg1 = (LuaLineListener *) obj;
delete arg1;
}
static swig_lua_method swig_LuaLineListener_methods[] = {
    {"putPoint", _wrap_TCODLine_Listener_putPoint}, 
    {0,0}
};
static swig_lua_attribute swig_LuaLineListener_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LuaLineListener_bases[] = {0,0,0};
static const char *swig_LuaLineListener_base_names[] = {"TCODLineListener *","LuaCallback *",0};
static swig_lua_class _wrap_class_LuaLineListener = { "TCODLine_Listener", &SWIGTYPE_p_LuaLineListener,_wrap_new_TCODLine_Listener, swig_delete_TCODLine_Listener, swig_LuaLineListener_methods, swig_LuaLineListener_attributes, swig_LuaLineListener_bases, swig_LuaLineListener_base_names };

static int _wrap_new_TCODPath_Callback(lua_State* L) {
  int SWIG_arg = 0;
  SWIGLUA_REF arg1 ;
  LuaPathCallback *result = 0 ;
  
  SWIG_check_num_args("LuaPathCallback",1,1)
  swiglua_ref_set(&arg1,L,1); 
  result = (LuaPathCallback *)new LuaPathCallback(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_LuaPathCallback,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODPath_Callback_getWalkCost(lua_State* L) {
  int SWIG_arg = 0;
  LuaPathCallback *arg1 = (LuaPathCallback *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *arg6 = (void *) 0 ;
  float result;
  
  SWIG_check_num_args("getWalkCost",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWalkCost",1,"LuaPathCallback const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getWalkCost",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getWalkCost",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getWalkCost",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getWalkCost",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("getWalkCost",6,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_LuaPathCallback,0))){
    SWIG_fail_ptr("TCODPath_Callback_getWalkCost",1,SWIGTYPE_p_LuaPathCallback);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6=(void *)SWIG_MustGetPtr(L,6,0,0,6,"TCODPath_Callback_getWalkCost");
  result = (float)((LuaPathCallback const *)arg1)->getWalkCost(arg2,arg3,arg4,arg5,arg6);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODPath_Callback(void *obj) {
LuaPathCallback *arg1 = (LuaPathCallback *) obj;
delete arg1;
}
static swig_lua_method swig_LuaPathCallback_methods[] = {
    {"getWalkCost", _wrap_TCODPath_Callback_getWalkCost}, 
    {0,0}
};
static swig_lua_attribute swig_LuaPathCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_LuaPathCallback_bases[] = {0,0,0};
static const char *swig_LuaPathCallback_base_names[] = {"ITCODPathCallback *","LuaCallback *",0};
static swig_lua_class _wrap_class_LuaPathCallback = { "TCODPath_Callback", &SWIGTYPE_p_LuaPathCallback,_wrap_new_TCODPath_Callback, swig_delete_TCODPath_Callback, swig_LuaPathCallback_methods, swig_LuaPathCallback_attributes, swig_LuaPathCallback_bases, swig_LuaPathCallback_base_names };

static int _wrap_ITCODBspCallback_visitNode(lua_State* L) {
  int SWIG_arg = 0;
  ITCODBspCallback *arg1 = (ITCODBspCallback *) 0 ;
  TCODBsp *arg2 = (TCODBsp *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("visitNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("visitNode",1,"ITCODBspCallback *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("visitNode",2,"TCODBsp *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("visitNode",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_ITCODBspCallback,0))){
    SWIG_fail_ptr("ITCODBspCallback_visitNode",1,SWIGTYPE_p_ITCODBspCallback);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("ITCODBspCallback_visitNode",2,SWIGTYPE_p_TCODBsp);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"ITCODBspCallback_visitNode");
  result = (bool)(arg1)->visitNode(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ITCODBspCallback(void *obj) {
ITCODBspCallback *arg1 = (ITCODBspCallback *) obj;
delete arg1;
}
static swig_lua_method swig_ITCODBspCallback_methods[] = {
    {"visitNode", _wrap_ITCODBspCallback_visitNode}, 
    {0,0}
};
static swig_lua_attribute swig_ITCODBspCallback_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_ITCODBspCallback_bases[] = {0};
static const char *swig_ITCODBspCallback_base_names[] = {0};
static swig_lua_class _wrap_class_ITCODBspCallback = { "ITCODBspCallback", &SWIGTYPE_p_ITCODBspCallback,0, swig_delete_ITCODBspCallback, swig_ITCODBspCallback_methods, swig_ITCODBspCallback_attributes, swig_ITCODBspCallback_bases, swig_ITCODBspCallback_base_names };

static int _wrap_TCODBsp_x_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"TCODBsp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_x_set",1,SWIGTYPE_p_TCODBsp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_x_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"TCODBsp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_x_get",1,SWIGTYPE_p_TCODBsp);
  }
  
  result = (int) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_y_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"TCODBsp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_y_set",1,SWIGTYPE_p_TCODBsp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_y_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"TCODBsp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_y_get",1,SWIGTYPE_p_TCODBsp);
  }
  
  result = (int) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_w_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"TCODBsp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("w",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_w_set",1,SWIGTYPE_p_TCODBsp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->w = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_w_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int result;
  
  SWIG_check_num_args("w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"TCODBsp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_w_get",1,SWIGTYPE_p_TCODBsp);
  }
  
  result = (int) ((arg1)->w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_h_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("h",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("h",1,"TCODBsp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("h",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_h_set",1,SWIGTYPE_p_TCODBsp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->h = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_h_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int result;
  
  SWIG_check_num_args("h",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("h",1,"TCODBsp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_h_get",1,SWIGTYPE_p_TCODBsp);
  }
  
  result = (int) ((arg1)->h);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_position_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("position",1,"TCODBsp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("position",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_position_set",1,SWIGTYPE_p_TCODBsp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->position = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_position_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int result;
  
  SWIG_check_num_args("position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("position",1,"TCODBsp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_position_get",1,SWIGTYPE_p_TCODBsp);
  }
  
  result = (int) ((arg1)->position);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_horizontal_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("horizontal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("horizontal",1,"TCODBsp *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("horizontal",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_horizontal_set",1,SWIGTYPE_p_TCODBsp);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->horizontal = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_horizontal_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  bool result;
  
  SWIG_check_num_args("horizontal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("horizontal",1,"TCODBsp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_horizontal_get",1,SWIGTYPE_p_TCODBsp);
  }
  
  result = (bool) ((arg1)->horizontal);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_level_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("level",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("level",1,"TCODBsp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("level",2,"uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_level_set",1,SWIGTYPE_p_TCODBsp);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  if (arg1) (arg1)->level = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_level_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("level",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("level",1,"TCODBsp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_level_get",1,SWIGTYPE_p_TCODBsp);
  }
  
  result = (uint8) ((arg1)->level);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODBsp__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *result = 0 ;
  
  SWIG_check_num_args("TCODBsp",0,0)
  result = (TCODBsp *)new TCODBsp();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODBsp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODBsp__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TCODBsp *result = 0 ;
  
  SWIG_check_num_args("TCODBsp",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODBsp",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODBsp",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODBsp",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TCODBsp",4,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (TCODBsp *)new TCODBsp(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODBsp,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODBsp(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TCODBsp__SWIG_0(L);
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_TCODBsp__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TCODBsp'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TCODBsp()\n"
    "    TCODBsp(int,int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODBsp_removeSons(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  
  SWIG_check_num_args("removeSons",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeSons",1,"TCODBsp *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_removeSons",1,SWIGTYPE_p_TCODBsp);
  }
  
  (arg1)->removeSons();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_splitOnce(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  bool arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("splitOnce",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("splitOnce",1,"TCODBsp *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("splitOnce",2,"bool");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("splitOnce",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_splitOnce",1,SWIGTYPE_p_TCODBsp);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->splitOnce(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_splitRecursive(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  TCODRandom *arg2 = (TCODRandom *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  float arg7 ;
  
  SWIG_check_num_args("splitRecursive",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("splitRecursive",1,"TCODBsp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("splitRecursive",2,"TCODRandom *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("splitRecursive",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("splitRecursive",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("splitRecursive",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("splitRecursive",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("splitRecursive",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_splitRecursive",1,SWIGTYPE_p_TCODBsp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODBsp_splitRecursive",2,SWIGTYPE_p_TCODRandom);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  (arg1)->splitRecursive(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_resize(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("resize",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("resize",1,"TCODBsp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("resize",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("resize",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("resize",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("resize",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_resize",1,SWIGTYPE_p_TCODBsp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->resize(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_getLeft(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  TCODBsp *result = 0 ;
  
  SWIG_check_num_args("getLeft",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLeft",1,"TCODBsp const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_getLeft",1,SWIGTYPE_p_TCODBsp);
  }
  
  result = (TCODBsp *)((TCODBsp const *)arg1)->getLeft();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODBsp,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_getRight(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  TCODBsp *result = 0 ;
  
  SWIG_check_num_args("getRight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRight",1,"TCODBsp const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_getRight",1,SWIGTYPE_p_TCODBsp);
  }
  
  result = (TCODBsp *)((TCODBsp const *)arg1)->getRight();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODBsp,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_getFather(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  TCODBsp *result = 0 ;
  
  SWIG_check_num_args("getFather",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFather",1,"TCODBsp const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_getFather",1,SWIGTYPE_p_TCODBsp);
  }
  
  result = (TCODBsp *)((TCODBsp const *)arg1)->getFather();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODBsp,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_isLeaf(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  bool result;
  
  SWIG_check_num_args("isLeaf",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isLeaf",1,"TCODBsp const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_isLeaf",1,SWIGTYPE_p_TCODBsp);
  }
  
  result = (bool)((TCODBsp const *)arg1)->isLeaf();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_contains(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("contains",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("contains",1,"TCODBsp const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("contains",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("contains",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_contains",1,SWIGTYPE_p_TCODBsp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)((TCODBsp const *)arg1)->contains(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_findNode(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  int arg2 ;
  int arg3 ;
  TCODBsp *result = 0 ;
  
  SWIG_check_num_args("findNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findNode",1,"TCODBsp *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("findNode",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("findNode",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_findNode",1,SWIGTYPE_p_TCODBsp);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (TCODBsp *)(arg1)->findNode(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODBsp,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_traversePreOrder(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  ITCODBspCallback *arg2 = (ITCODBspCallback *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("traversePreOrder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("traversePreOrder",1,"TCODBsp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("traversePreOrder",2,"ITCODBspCallback *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("traversePreOrder",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_traversePreOrder",1,SWIGTYPE_p_TCODBsp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ITCODBspCallback,0))){
    SWIG_fail_ptr("TCODBsp_traversePreOrder",2,SWIGTYPE_p_ITCODBspCallback);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"TCODBsp_traversePreOrder");
  result = (bool)(arg1)->traversePreOrder(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_traverseInOrder(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  ITCODBspCallback *arg2 = (ITCODBspCallback *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("traverseInOrder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("traverseInOrder",1,"TCODBsp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("traverseInOrder",2,"ITCODBspCallback *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("traverseInOrder",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_traverseInOrder",1,SWIGTYPE_p_TCODBsp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ITCODBspCallback,0))){
    SWIG_fail_ptr("TCODBsp_traverseInOrder",2,SWIGTYPE_p_ITCODBspCallback);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"TCODBsp_traverseInOrder");
  result = (bool)(arg1)->traverseInOrder(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_traversePostOrder(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  ITCODBspCallback *arg2 = (ITCODBspCallback *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("traversePostOrder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("traversePostOrder",1,"TCODBsp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("traversePostOrder",2,"ITCODBspCallback *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("traversePostOrder",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_traversePostOrder",1,SWIGTYPE_p_TCODBsp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ITCODBspCallback,0))){
    SWIG_fail_ptr("TCODBsp_traversePostOrder",2,SWIGTYPE_p_ITCODBspCallback);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"TCODBsp_traversePostOrder");
  result = (bool)(arg1)->traversePostOrder(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_traverseLevelOrder(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  ITCODBspCallback *arg2 = (ITCODBspCallback *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("traverseLevelOrder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("traverseLevelOrder",1,"TCODBsp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("traverseLevelOrder",2,"ITCODBspCallback *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("traverseLevelOrder",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_traverseLevelOrder",1,SWIGTYPE_p_TCODBsp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ITCODBspCallback,0))){
    SWIG_fail_ptr("TCODBsp_traverseLevelOrder",2,SWIGTYPE_p_ITCODBspCallback);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"TCODBsp_traverseLevelOrder");
  result = (bool)(arg1)->traverseLevelOrder(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODBsp_traverseInvertedLevelOrder(lua_State* L) {
  int SWIG_arg = 0;
  TCODBsp *arg1 = (TCODBsp *) 0 ;
  ITCODBspCallback *arg2 = (ITCODBspCallback *) 0 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  SWIG_check_num_args("traverseInvertedLevelOrder",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("traverseInvertedLevelOrder",1,"TCODBsp *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("traverseInvertedLevelOrder",2,"ITCODBspCallback *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("traverseInvertedLevelOrder",3,"void *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODBsp,0))){
    SWIG_fail_ptr("TCODBsp_traverseInvertedLevelOrder",1,SWIGTYPE_p_TCODBsp);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_ITCODBspCallback,0))){
    SWIG_fail_ptr("TCODBsp_traverseInvertedLevelOrder",2,SWIGTYPE_p_ITCODBspCallback);
  }
  
  arg3=(void *)SWIG_MustGetPtr(L,3,0,0,3,"TCODBsp_traverseInvertedLevelOrder");
  result = (bool)(arg1)->traverseInvertedLevelOrder(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODBsp(void *obj) {
TCODBsp *arg1 = (TCODBsp *) obj;
delete arg1;
}
static swig_lua_method swig_TCODBsp_methods[] = {
    {"removeSons", _wrap_TCODBsp_removeSons}, 
    {"splitOnce", _wrap_TCODBsp_splitOnce}, 
    {"splitRecursive", _wrap_TCODBsp_splitRecursive}, 
    {"resize", _wrap_TCODBsp_resize}, 
    {"getLeft", _wrap_TCODBsp_getLeft}, 
    {"getRight", _wrap_TCODBsp_getRight}, 
    {"getFather", _wrap_TCODBsp_getFather}, 
    {"isLeaf", _wrap_TCODBsp_isLeaf}, 
    {"contains", _wrap_TCODBsp_contains}, 
    {"findNode", _wrap_TCODBsp_findNode}, 
    {"traversePreOrder", _wrap_TCODBsp_traversePreOrder}, 
    {"traverseInOrder", _wrap_TCODBsp_traverseInOrder}, 
    {"traversePostOrder", _wrap_TCODBsp_traversePostOrder}, 
    {"traverseLevelOrder", _wrap_TCODBsp_traverseLevelOrder}, 
    {"traverseInvertedLevelOrder", _wrap_TCODBsp_traverseInvertedLevelOrder}, 
    {0,0}
};
static swig_lua_attribute swig_TCODBsp_attributes[] = {
    { "x", _wrap_TCODBsp_x_get, _wrap_TCODBsp_x_set},
    { "y", _wrap_TCODBsp_y_get, _wrap_TCODBsp_y_set},
    { "w", _wrap_TCODBsp_w_get, _wrap_TCODBsp_w_set},
    { "h", _wrap_TCODBsp_h_get, _wrap_TCODBsp_h_set},
    { "position", _wrap_TCODBsp_position_get, _wrap_TCODBsp_position_set},
    { "horizontal", _wrap_TCODBsp_horizontal_get, _wrap_TCODBsp_horizontal_set},
    { "level", _wrap_TCODBsp_level_get, _wrap_TCODBsp_level_set},
    {0,0,0}
};
static swig_lua_class *swig_TCODBsp_bases[] = {0};
static const char *swig_TCODBsp_base_names[] = {0};
static swig_lua_class _wrap_class_TCODBsp = { "TCODBsp", &SWIGTYPE_p_TCODBsp,_wrap_new_TCODBsp, swig_delete_TCODBsp, swig_TCODBsp_methods, swig_TCODBsp_attributes, swig_TCODBsp_bases, swig_TCODBsp_base_names };

static int _wrap_TCODConsole_root_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  
  SWIG_check_num_args("TCODConsole::root",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCODConsole::root",1,"TCODConsole *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_root_set",1,SWIGTYPE_p_TCODConsole);
  }
  
  TCODConsole::root = arg1;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_root_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *result = 0 ;
  
  SWIG_check_num_args("TCODConsole::root",0,0)
  result = (TCODConsole *)TCODConsole::root;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODConsole,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_initRoot__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  TCOD_renderer_t arg5 ;
  
  SWIG_check_num_args("TCODConsole::initRoot",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole::initRoot",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::initRoot",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TCODConsole::initRoot",3,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("TCODConsole::initRoot",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TCODConsole::initRoot",5,"TCOD_renderer_t");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (TCOD_renderer_t)(int)lua_tonumber(L, 5);
  TCODConsole::initRoot(arg1,arg2,(char const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_initRoot__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  
  SWIG_check_num_args("TCODConsole::initRoot",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole::initRoot",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::initRoot",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TCODConsole::initRoot",3,"char const *");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("TCODConsole::initRoot",4,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  TCODConsole::initRoot(arg1,arg2,(char const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_initRoot__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  SWIG_check_num_args("TCODConsole::initRoot",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole::initRoot",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::initRoot",2,"int");
  if(!lua_isstring(L,3)) SWIG_fail_arg("TCODConsole::initRoot",3,"char const *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (char *)lua_tostring(L, 3);
  TCODConsole::initRoot(arg1,arg2,(char const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_initRoot(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_TCODConsole_initRoot__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODConsole_initRoot__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TCODConsole_initRoot__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODConsole_initRoot'\n"
    "  Possible C/C++ prototypes are:\n"
    "    initRoot(int,int,char const *,bool,TCOD_renderer_t)\n"
    "    initRoot(int,int,char const *,bool)\n"
    "    TCODConsole::initRoot(int,int,char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODConsole_setCustomFont__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("TCODConsole::setCustomFont",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODConsole::setCustomFont",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::setCustomFont",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODConsole::setCustomFont",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TCODConsole::setCustomFont",4,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  TCODConsole::setCustomFont((char const *)arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setCustomFont__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("TCODConsole::setCustomFont",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODConsole::setCustomFont",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::setCustomFont",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODConsole::setCustomFont",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  TCODConsole::setCustomFont((char const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setCustomFont__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("TCODConsole::setCustomFont",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODConsole::setCustomFont",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::setCustomFont",2,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  TCODConsole::setCustomFont((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setCustomFont__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("TCODConsole::setCustomFont",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODConsole::setCustomFont",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  TCODConsole::setCustomFont((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setCustomFont(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_TCODConsole_setCustomFont__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TCODConsole_setCustomFont__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TCODConsole_setCustomFont__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODConsole_setCustomFont__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODConsole_setCustomFont'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setCustomFont(char const *,int,int,int)\n"
    "    setCustomFont(char const *,int,int)\n"
    "    setCustomFont(char const *,int)\n"
    "    TCODConsole::setCustomFont(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODConsole_mapAsciiCodeToFont(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("TCODConsole::mapAsciiCodeToFont",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole::mapAsciiCodeToFont",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::mapAsciiCodeToFont",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODConsole::mapAsciiCodeToFont",3,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  TCODConsole::mapAsciiCodeToFont(arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_mapAsciiCodesToFont(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("TCODConsole::mapAsciiCodesToFont",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole::mapAsciiCodesToFont",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::mapAsciiCodesToFont",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODConsole::mapAsciiCodesToFont",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TCODConsole::mapAsciiCodesToFont",4,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  TCODConsole::mapAsciiCodesToFont(arg1,arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_mapStringToFont(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("TCODConsole::mapStringToFont",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODConsole::mapStringToFont",1,"char const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::mapStringToFont",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODConsole::mapStringToFont",3,"int");
  arg1 = (char *)lua_tostring(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  TCODConsole::mapStringToFont((char const *)arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_isFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("TCODConsole::isFullscreen",0,0)
  result = (bool)TCODConsole::isFullscreen();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setFullscreen(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("TCODConsole::setFullscreen",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("TCODConsole::setFullscreen",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  TCODConsole::setFullscreen(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setWindowTitle(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("TCODConsole::setWindowTitle",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODConsole::setWindowTitle",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  TCODConsole::setWindowTitle((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_isWindowClosed(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("TCODConsole::isWindowClosed",0,0)
  result = (bool)TCODConsole::isWindowClosed();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_credits(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("TCODConsole::credits",0,0)
  TCODConsole::credits();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_renderCredits(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("TCODConsole::renderCredits",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole::renderCredits",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::renderCredits",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("TCODConsole::renderCredits",3,"bool");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)TCODConsole::renderCredits(arg1,arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_resetCredits(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("TCODConsole::resetCredits",0,0)
  TCODConsole::resetCredits();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setDefaultBackground(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  TCODColor arg2 ;
  TCODColor *argp2 ;
  
  SWIG_check_num_args("setDefaultBackground",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDefaultBackground",1,"TCODConsole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setDefaultBackground",2,"TCODColor");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_setDefaultBackground",1,SWIGTYPE_p_TCODConsole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODConsole_setDefaultBackground",2,SWIGTYPE_p_TCODColor);
  }
  arg2 = *argp2;
  
  (arg1)->setDefaultBackground(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setDefaultForeground(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  TCODColor arg2 ;
  TCODColor *argp2 ;
  
  SWIG_check_num_args("setDefaultForeground",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDefaultForeground",1,"TCODConsole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setDefaultForeground",2,"TCODColor");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_setDefaultForeground",1,SWIGTYPE_p_TCODConsole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODConsole_setDefaultForeground",2,SWIGTYPE_p_TCODColor);
  }
  arg2 = *argp2;
  
  (arg1)->setDefaultForeground(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_clear(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"TCODConsole *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_clear",1,SWIGTYPE_p_TCODConsole);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setCharBackground__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  TCODColor *arg4 = 0 ;
  TCOD_bkgnd_flag_t arg5 ;
  
  SWIG_check_num_args("setCharBackground",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCharBackground",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCharBackground",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setCharBackground",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setCharBackground",4,"TCODColor const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setCharBackground",5,"TCOD_bkgnd_flag_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_setCharBackground",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODConsole_setCharBackground",4,SWIGTYPE_p_TCODColor);
  }
  
  arg5 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 5);
  (arg1)->setCharBackground(arg2,arg3,(TCODColor const &)*arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setCharBackground__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  TCODColor *arg4 = 0 ;
  
  SWIG_check_num_args("setCharBackground",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCharBackground",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCharBackground",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setCharBackground",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setCharBackground",4,"TCODColor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_setCharBackground",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODConsole_setCharBackground",4,SWIGTYPE_p_TCODColor);
  }
  
  (arg1)->setCharBackground(arg2,arg3,(TCODColor const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setCharBackground(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_TCODColor, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_TCODConsole_setCharBackground__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_TCODColor, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TCODConsole_setCharBackground__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODConsole_setCharBackground'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setCharBackground(TCODConsole *,int,int,TCODColor const &,TCOD_bkgnd_flag_t)\n"
    "    setCharBackground(TCODConsole *,int,int,TCODColor const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODConsole_setCharForeground(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  TCODColor *arg4 = 0 ;
  
  SWIG_check_num_args("setCharForeground",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCharForeground",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCharForeground",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setCharForeground",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("setCharForeground",4,"TCODColor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_setCharForeground",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODConsole_setCharForeground",4,SWIGTYPE_p_TCODColor);
  }
  
  (arg1)->setCharForeground(arg2,arg3,(TCODColor const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setChar(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("setChar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setChar",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setChar",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setChar",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setChar",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_setChar",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->setChar(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_putChar__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TCOD_bkgnd_flag_t arg5 ;
  
  SWIG_check_num_args("putChar",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("putChar",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("putChar",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("putChar",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("putChar",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("putChar",5,"TCOD_bkgnd_flag_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_putChar",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 5);
  (arg1)->putChar(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_putChar__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("putChar",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("putChar",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("putChar",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("putChar",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("putChar",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_putChar",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->putChar(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_putChar(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODConsole_putChar__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TCODConsole_putChar__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODConsole_putChar'\n"
    "  Possible C/C++ prototypes are:\n"
    "    putChar(TCODConsole *,int,int,int,TCOD_bkgnd_flag_t)\n"
    "    putChar(TCODConsole *,int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODConsole_putCharEx(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TCODColor *arg5 = 0 ;
  TCODColor *arg6 = 0 ;
  
  SWIG_check_num_args("putCharEx",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("putCharEx",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("putCharEx",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("putCharEx",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("putCharEx",4,"int");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("putCharEx",5,"TCODColor const &");
  if(!lua_isuserdata(L,6)) SWIG_fail_arg("putCharEx",6,"TCODColor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_putCharEx",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODConsole_putCharEx",5,SWIGTYPE_p_TCODColor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODConsole_putCharEx",6,SWIGTYPE_p_TCODColor);
  }
  
  (arg1)->putCharEx(arg2,arg3,arg4,(TCODColor const &)*arg5,(TCODColor const &)*arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setBackgroundFlag(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  TCOD_bkgnd_flag_t arg2 ;
  
  SWIG_check_num_args("setBackgroundFlag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setBackgroundFlag",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setBackgroundFlag",2,"TCOD_bkgnd_flag_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_setBackgroundFlag",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 2);
  (arg1)->setBackgroundFlag(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getBackgroundFlag(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  TCOD_bkgnd_flag_t result;
  
  SWIG_check_num_args("getBackgroundFlag",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBackgroundFlag",1,"TCODConsole const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_getBackgroundFlag",1,SWIGTYPE_p_TCODConsole);
  }
  
  result = (TCOD_bkgnd_flag_t)((TCODConsole const *)arg1)->getBackgroundFlag();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setAlignment(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  TCOD_alignment_t arg2 ;
  
  SWIG_check_num_args("setAlignment",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAlignment",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setAlignment",2,"TCOD_alignment_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_setAlignment",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (TCOD_alignment_t)(int)lua_tonumber(L, 2);
  (arg1)->setAlignment(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getAlignment(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  TCOD_alignment_t result;
  
  SWIG_check_num_args("getAlignment",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAlignment",1,"TCODConsole const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_getAlignment",1,SWIGTYPE_p_TCODConsole);
  }
  
  result = (TCOD_alignment_t)((TCODConsole const *)arg1)->getAlignment();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_print(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  SWIG_check_num_args("print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("print",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("print",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("print",3,"int");
  if(!lua_isstring(L,4)) SWIG_fail_arg("print",4,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_print",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  (arg1)->print(arg2,arg3,(char const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_printEx(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  TCOD_bkgnd_flag_t arg4 ;
  TCOD_alignment_t arg5 ;
  char *arg6 = (char *) 0 ;
  void *arg7 = 0 ;
  
  SWIG_check_num_args("printEx",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("printEx",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("printEx",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("printEx",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("printEx",4,"TCOD_bkgnd_flag_t");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("printEx",5,"TCOD_alignment_t");
  if(!lua_isstring(L,6)) SWIG_fail_arg("printEx",6,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_printEx",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 4);
  arg5 = (TCOD_alignment_t)(int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  (arg1)->printEx(arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_printRect(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  void *arg7 = 0 ;
  int result;
  
  SWIG_check_num_args("printRect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("printRect",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("printRect",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("printRect",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("printRect",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("printRect",5,"int");
  if(!lua_isstring(L,6)) SWIG_fail_arg("printRect",6,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_printRect",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (int)(arg1)->printRect(arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_printRectEx(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  TCOD_bkgnd_flag_t arg6 ;
  TCOD_alignment_t arg7 ;
  char *arg8 = (char *) 0 ;
  void *arg9 = 0 ;
  int result;
  
  SWIG_check_num_args("printRectEx",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("printRectEx",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("printRectEx",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("printRectEx",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("printRectEx",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("printRectEx",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("printRectEx",6,"TCOD_bkgnd_flag_t");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("printRectEx",7,"TCOD_alignment_t");
  if(!lua_isstring(L,8)) SWIG_fail_arg("printRectEx",8,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_printRectEx",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 6);
  arg7 = (TCOD_alignment_t)(int)lua_tonumber(L, 7);
  arg8 = (char *)lua_tostring(L, 8);
  result = (int)(arg1)->printRectEx(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getHeightRect(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  void *arg7 = 0 ;
  int result;
  
  SWIG_check_num_args("getHeightRect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getHeightRect",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getHeightRect",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getHeightRect",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getHeightRect",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getHeightRect",5,"int");
  if(!lua_isstring(L,6)) SWIG_fail_arg("getHeightRect",6,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_getHeightRect",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (char *)lua_tostring(L, 6);
  result = (int)(arg1)->getHeightRect(arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_rect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  TCOD_bkgnd_flag_t arg7 ;
  
  SWIG_check_num_args("rect",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rect",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rect",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rect",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rect",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rect",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("rect",6,"bool");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("rect",7,"TCOD_bkgnd_flag_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_rect",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 7);
  (arg1)->rect(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_rect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  
  SWIG_check_num_args("rect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rect",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rect",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rect",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rect",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("rect",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("rect",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_rect",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->rect(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_rect(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_TCODConsole_rect__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_TCODConsole_rect__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODConsole_rect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rect(TCODConsole *,int,int,int,int,bool,TCOD_bkgnd_flag_t)\n"
    "    rect(TCODConsole *,int,int,int,int,bool)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODConsole_hline__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TCOD_bkgnd_flag_t arg5 ;
  
  SWIG_check_num_args("hline",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hline",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hline",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("hline",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("hline",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("hline",5,"TCOD_bkgnd_flag_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_hline",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 5);
  (arg1)->hline(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_hline__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("hline",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hline",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hline",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("hline",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("hline",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_hline",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->hline(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_hline(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODConsole_hline__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TCODConsole_hline__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODConsole_hline'\n"
    "  Possible C/C++ prototypes are:\n"
    "    hline(TCODConsole *,int,int,int,TCOD_bkgnd_flag_t)\n"
    "    hline(TCODConsole *,int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODConsole_vline__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  TCOD_bkgnd_flag_t arg5 ;
  
  SWIG_check_num_args("vline",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vline",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vline",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("vline",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("vline",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("vline",5,"TCOD_bkgnd_flag_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_vline",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 5);
  (arg1)->vline(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_vline__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("vline",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vline",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vline",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("vline",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("vline",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_vline",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->vline(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_vline(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODConsole_vline__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TCODConsole_vline__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODConsole_vline'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vline(TCODConsole *,int,int,int,TCOD_bkgnd_flag_t)\n"
    "    vline(TCODConsole *,int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODConsole_printFrame__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  TCOD_bkgnd_flag_t arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  
  SWIG_check_num_args("printFrame",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("printFrame",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("printFrame",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("printFrame",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("printFrame",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("printFrame",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("printFrame",6,"bool");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("printFrame",7,"TCOD_bkgnd_flag_t");
  if(!lua_isstring(L,8)) SWIG_fail_arg("printFrame",8,"char const *");
  if(!lua_isstring(L,9)) SWIG_fail_arg("printFrame",9,"char *");
  if(!lua_isstring(L,10)) SWIG_fail_arg("printFrame",10,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_printFrame",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 7);
  arg8 = (char *)lua_tostring(L, 8);
  arg9 = (char *)lua_tostring(L, 9);
  arg10 = (char *)lua_tostring(L, 10);
  (arg1)->printFrame(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_printFrame__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  TCOD_bkgnd_flag_t arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  
  SWIG_check_num_args("printFrame",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("printFrame",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("printFrame",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("printFrame",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("printFrame",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("printFrame",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("printFrame",6,"bool");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("printFrame",7,"TCOD_bkgnd_flag_t");
  if(!lua_isstring(L,8)) SWIG_fail_arg("printFrame",8,"char const *");
  if(!lua_isstring(L,9)) SWIG_fail_arg("printFrame",9,"char *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_printFrame",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 7);
  arg8 = (char *)lua_tostring(L, 8);
  arg9 = (char *)lua_tostring(L, 9);
  (arg1)->printFrame(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_printFrame__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  TCOD_bkgnd_flag_t arg7 ;
  char *arg8 = (char *) 0 ;
  
  SWIG_check_num_args("printFrame",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("printFrame",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("printFrame",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("printFrame",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("printFrame",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("printFrame",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("printFrame",6,"bool");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("printFrame",7,"TCOD_bkgnd_flag_t");
  if(!lua_isstring(L,8)) SWIG_fail_arg("printFrame",8,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_printFrame",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 7);
  arg8 = (char *)lua_tostring(L, 8);
  (arg1)->printFrame(arg2,arg3,arg4,arg5,arg6,arg7,(char const *)arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_printFrame__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  TCOD_bkgnd_flag_t arg7 ;
  
  SWIG_check_num_args("printFrame",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("printFrame",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("printFrame",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("printFrame",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("printFrame",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("printFrame",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("printFrame",6,"bool");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("printFrame",7,"TCOD_bkgnd_flag_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_printFrame",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  arg7 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 7);
  (arg1)->printFrame(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_printFrame__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  
  SWIG_check_num_args("printFrame",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("printFrame",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("printFrame",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("printFrame",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("printFrame",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("printFrame",5,"int");
  if(!lua_isboolean(L,6)) SWIG_fail_arg("printFrame",6,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_printFrame",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (lua_toboolean(L, 6)!=0);
  (arg1)->printFrame(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_printFrame__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("printFrame",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("printFrame",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("printFrame",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("printFrame",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("printFrame",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("printFrame",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_printFrame",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->printFrame(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_printFrame(lua_State* L) {
  int argc;
  int argv[11]={
    1,2,3,4,5,6,7,8,9,10,11
  };
  
  argc = lua_gettop(L);
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TCODConsole_printFrame__SWIG_5(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                return _wrap_TCODConsole_printFrame__SWIG_4(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_TCODConsole_printFrame__SWIG_3(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isstring(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_TCODConsole_printFrame__SWIG_2(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isstring(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isstring(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_TCODConsole_printFrame__SWIG_1(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isboolean(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isstring(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isstring(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isstring(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_TCODConsole_printFrame__SWIG_0(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODConsole_printFrame'\n"
    "  Possible C/C++ prototypes are:\n"
    "    printFrame(TCODConsole *,int,int,int,int,bool,TCOD_bkgnd_flag_t,char const *,char *,char *)\n"
    "    printFrame(TCODConsole *,int,int,int,int,bool,TCOD_bkgnd_flag_t,char const *,char *)\n"
    "    printFrame(TCODConsole *,int,int,int,int,bool,TCOD_bkgnd_flag_t,char const *)\n"
    "    printFrame(TCODConsole *,int,int,int,int,bool,TCOD_bkgnd_flag_t)\n"
    "    printFrame(TCODConsole *,int,int,int,int,bool)\n"
    "    printFrame(TCODConsole *,int,int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODConsole_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int result;
  
  SWIG_check_num_args("getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWidth",1,"TCODConsole const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_getWidth",1,SWIGTYPE_p_TCODConsole);
  }
  
  result = (int)((TCODConsole const *)arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int result;
  
  SWIG_check_num_args("getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getHeight",1,"TCODConsole const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_getHeight",1,SWIGTYPE_p_TCODConsole);
  }
  
  result = (int)((TCODConsole const *)arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getDefaultBackground(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  TCODColor result;
  
  SWIG_check_num_args("getDefaultBackground",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDefaultBackground",1,"TCODConsole const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_getDefaultBackground",1,SWIGTYPE_p_TCODConsole);
  }
  
  result = ((TCODConsole const *)arg1)->getDefaultBackground();
  {
    TCODColor * resultptr = new TCODColor((const TCODColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCODColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getDefaultForeground(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  TCODColor result;
  
  SWIG_check_num_args("getDefaultForeground",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDefaultForeground",1,"TCODConsole const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_getDefaultForeground",1,SWIGTYPE_p_TCODConsole);
  }
  
  result = ((TCODConsole const *)arg1)->getDefaultForeground();
  {
    TCODColor * resultptr = new TCODColor((const TCODColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCODColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getCharBackground(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  TCODColor result;
  
  SWIG_check_num_args("getCharBackground",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCharBackground",1,"TCODConsole const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getCharBackground",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getCharBackground",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_getCharBackground",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((TCODConsole const *)arg1)->getCharBackground(arg2,arg3);
  {
    TCODColor * resultptr = new TCODColor((const TCODColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCODColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getCharForeground(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  TCODColor result;
  
  SWIG_check_num_args("getCharForeground",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCharForeground",1,"TCODConsole const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getCharForeground",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getCharForeground",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_getCharForeground",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((TCODConsole const *)arg1)->getCharForeground(arg2,arg3);
  {
    TCODColor * resultptr = new TCODColor((const TCODColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCODColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getChar(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("getChar",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getChar",1,"TCODConsole const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getChar",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getChar",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_getChar",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)((TCODConsole const *)arg1)->getChar(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setFade(lua_State* L) {
  int SWIG_arg = 0;
  uint8 arg1 ;
  TCODColor *arg2 = 0 ;
  
  SWIG_check_num_args("TCODConsole::setFade",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole::setFade",1,"uint8");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TCODConsole::setFade",2,"TCODColor const &");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (uint8)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODConsole_setFade",2,SWIGTYPE_p_TCODColor);
  }
  
  TCODConsole::setFade(arg1,(TCODColor const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getFade(lua_State* L) {
  int SWIG_arg = 0;
  uint8 result;
  
  SWIG_check_num_args("TCODConsole::getFade",0,0)
  result = (uint8)TCODConsole::getFade();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getFadingColor(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor result;
  
  SWIG_check_num_args("TCODConsole::getFadingColor",0,0)
  result = TCODConsole::getFadingColor();
  {
    TCODColor * resultptr = new TCODColor((const TCODColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCODColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_flush(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("TCODConsole::flush",0,0)
  TCODConsole::flush();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_waitForKeypress(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  TCOD_key_t result;
  
  SWIG_check_num_args("TCODConsole::waitForKeypress",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("TCODConsole::waitForKeypress",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  result = TCODConsole::waitForKeypress(arg1);
  {
    TCOD_key_t * resultptr = new TCOD_key_t((const TCOD_key_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCOD_key_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_checkForKeypress__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  TCOD_key_t result;
  
  SWIG_check_num_args("TCODConsole::checkForKeypress",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole::checkForKeypress",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = TCODConsole::checkForKeypress(arg1);
  {
    TCOD_key_t * resultptr = new TCOD_key_t((const TCOD_key_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCOD_key_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_checkForKeypress__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t result;
  
  SWIG_check_num_args("TCODConsole::checkForKeypress",0,0)
  result = TCODConsole::checkForKeypress();
  {
    TCOD_key_t * resultptr = new TCOD_key_t((const TCOD_key_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCOD_key_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_checkForKeypress(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_TCODConsole_checkForKeypress__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_TCODConsole_checkForKeypress__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODConsole_checkForKeypress'\n"
    "  Possible C/C++ prototypes are:\n"
    "    checkForKeypress(int)\n"
    "    TCODConsole::checkForKeypress()\n");
  lua_error(L);return 0;
}


static int _wrap_TCODConsole_isKeyPressed(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_keycode_t arg1 ;
  bool result;
  
  SWIG_check_num_args("TCODConsole::isKeyPressed",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole::isKeyPressed",1,"TCOD_keycode_t");
  arg1 = (TCOD_keycode_t)(int)lua_tonumber(L, 1);
  result = (bool)TCODConsole::isKeyPressed(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setKeyboardRepeat(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  
  SWIG_check_num_args("TCODConsole::setKeyboardRepeat",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole::setKeyboardRepeat",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::setKeyboardRepeat",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  TCODConsole::setKeyboardRepeat(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_disableKeyboardRepeat(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("TCODConsole::disableKeyboardRepeat",0,0)
  TCODConsole::disableKeyboardRepeat();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODConsole(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  TCODConsole *result = 0 ;
  
  SWIG_check_num_args("TCODConsole",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (TCODConsole *)new TCODConsole(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODConsole,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_blit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  TCODConsole *arg6 = (TCODConsole *) 0 ;
  int arg7 ;
  int arg8 ;
  float arg9 ;
  float arg10 ;
  
  SWIG_check_num_args("TCODConsole::blit",10,10)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCODConsole::blit",1,"TCODConsole const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::blit",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODConsole::blit",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TCODConsole::blit",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TCODConsole::blit",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("TCODConsole::blit",6,"TCODConsole *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("TCODConsole::blit",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("TCODConsole::blit",8,"int");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("TCODConsole::blit",9,"float");
  if(!lua_isnumber(L,10)) SWIG_fail_arg("TCODConsole::blit",10,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_blit",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_blit",6,SWIGTYPE_p_TCODConsole);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  arg10 = (float)lua_tonumber(L, 10);
  TCODConsole::blit((TCODConsole const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_blit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  TCODConsole *arg6 = (TCODConsole *) 0 ;
  int arg7 ;
  int arg8 ;
  float arg9 ;
  
  SWIG_check_num_args("TCODConsole::blit",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCODConsole::blit",1,"TCODConsole const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::blit",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODConsole::blit",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TCODConsole::blit",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TCODConsole::blit",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("TCODConsole::blit",6,"TCODConsole *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("TCODConsole::blit",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("TCODConsole::blit",8,"int");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("TCODConsole::blit",9,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_blit",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_blit",6,SWIGTYPE_p_TCODConsole);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  TCODConsole::blit((TCODConsole const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_blit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  TCODConsole *arg6 = (TCODConsole *) 0 ;
  int arg7 ;
  int arg8 ;
  
  SWIG_check_num_args("TCODConsole::blit",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCODConsole::blit",1,"TCODConsole const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODConsole::blit",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODConsole::blit",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TCODConsole::blit",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TCODConsole::blit",5,"int");
  if(!SWIG_isptrtype(L,6)) SWIG_fail_arg("TCODConsole::blit",6,"TCODConsole *");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("TCODConsole::blit",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("TCODConsole::blit",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_blit",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,6,(void**)&arg6,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_blit",6,SWIGTYPE_p_TCODConsole);
  }
  
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  TCODConsole::blit((TCODConsole const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_blit(lua_State* L) {
  int argc;
  int argv[11]={
    1,2,3,4,5,6,7,8,9,10,11
  };
  
  argc = lua_gettop(L);
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_TCODConsole_blit__SWIG_2(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      return _wrap_TCODConsole_blit__SWIG_1(L);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                void *ptr;
                if (SWIG_isptrtype(L,argv[5])==0 || SWIG_ConvertPtr(L,argv[5], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
                  _v = 0;
                } else {
                  _v = 1;
                }
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    {
                      _v = lua_isnumber(L,argv[8]);
                    }
                    if (_v) {
                      {
                        _v = lua_isnumber(L,argv[9]);
                      }
                      if (_v) {
                        return _wrap_TCODConsole_blit__SWIG_0(L);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODConsole_blit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    blit(TCODConsole const *,int,int,int,int,TCODConsole *,int,int,float,float)\n"
    "    blit(TCODConsole const *,int,int,int,int,TCODConsole *,int,int,float)\n"
    "    TCODConsole::blit(TCODConsole const *,int,int,int,int,TCODConsole *,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODConsole_setKeyColor(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  TCODColor *arg2 = 0 ;
  
  SWIG_check_num_args("setKeyColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setKeyColor",1,"TCODConsole *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setKeyColor",2,"TCODColor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_setKeyColor",1,SWIGTYPE_p_TCODConsole);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODConsole_setKeyColor",2,SWIGTYPE_p_TCODColor);
  }
  
  (arg1)->setKeyColor((TCODColor const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_setDirty(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("setDirty",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDirty",1,"TCODConsole *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setDirty",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setDirty",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setDirty",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setDirty",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODConsole_setDirty",1,SWIGTYPE_p_TCODConsole);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->setDirty(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getColorControlString(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_colctrl_t arg1 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TCODConsole::getColorControlString",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole::getColorControlString",1,"TCOD_colctrl_t");
  arg1 = (TCOD_colctrl_t)(int)lua_tonumber(L, 1);
  result = (char *)TCODConsole::getColorControlString(arg1);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODConsole_getRGBColorControlString(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_colctrl_t arg1 ;
  TCODColor *arg2 = 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("TCODConsole::getRGBColorControlString",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODConsole::getRGBColorControlString",1,"TCOD_colctrl_t");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TCODConsole::getRGBColorControlString",2,"TCODColor const &");
  arg1 = (TCOD_colctrl_t)(int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODConsole_getRGBColorControlString",2,SWIGTYPE_p_TCODColor);
  }
  
  result = (char *)TCODConsole::getRGBColorControlString(arg1,(TCODColor const &)*arg2);
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODConsole(void *obj) {
TCODConsole *arg1 = (TCODConsole *) obj;
delete arg1;
}
static swig_lua_method swig_TCODConsole_methods[] = {
    {"setDefaultBackground", _wrap_TCODConsole_setDefaultBackground}, 
    {"setDefaultForeground", _wrap_TCODConsole_setDefaultForeground}, 
    {"clear", _wrap_TCODConsole_clear}, 
    {"setCharBackground", _wrap_TCODConsole_setCharBackground}, 
    {"setCharForeground", _wrap_TCODConsole_setCharForeground}, 
    {"setChar", _wrap_TCODConsole_setChar}, 
    {"putChar", _wrap_TCODConsole_putChar}, 
    {"putCharEx", _wrap_TCODConsole_putCharEx}, 
    {"setBackgroundFlag", _wrap_TCODConsole_setBackgroundFlag}, 
    {"getBackgroundFlag", _wrap_TCODConsole_getBackgroundFlag}, 
    {"setAlignment", _wrap_TCODConsole_setAlignment}, 
    {"getAlignment", _wrap_TCODConsole_getAlignment}, 
    {"print", _wrap_TCODConsole_print}, 
    {"printEx", _wrap_TCODConsole_printEx}, 
    {"printRect", _wrap_TCODConsole_printRect}, 
    {"printRectEx", _wrap_TCODConsole_printRectEx}, 
    {"getHeightRect", _wrap_TCODConsole_getHeightRect}, 
    {"rect", _wrap_TCODConsole_rect}, 
    {"hline", _wrap_TCODConsole_hline}, 
    {"vline", _wrap_TCODConsole_vline}, 
    {"printFrame", _wrap_TCODConsole_printFrame}, 
    {"getWidth", _wrap_TCODConsole_getWidth}, 
    {"getHeight", _wrap_TCODConsole_getHeight}, 
    {"getDefaultBackground", _wrap_TCODConsole_getDefaultBackground}, 
    {"getDefaultForeground", _wrap_TCODConsole_getDefaultForeground}, 
    {"getCharBackground", _wrap_TCODConsole_getCharBackground}, 
    {"getCharForeground", _wrap_TCODConsole_getCharForeground}, 
    {"getChar", _wrap_TCODConsole_getChar}, 
    {"setKeyColor", _wrap_TCODConsole_setKeyColor}, 
    {"setDirty", _wrap_TCODConsole_setDirty}, 
    {0,0}
};
static swig_lua_attribute swig_TCODConsole_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODConsole_bases[] = {0};
static const char *swig_TCODConsole_base_names[] = {0};
static swig_lua_class _wrap_class_TCODConsole = { "TCODConsole", &SWIGTYPE_p_TCODConsole,_wrap_new_TCODConsole, swig_delete_TCODConsole, swig_TCODConsole_methods, swig_TCODConsole_attributes, swig_TCODConsole_bases, swig_TCODConsole_base_names };

static int _wrap_new_TCODMap(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  TCODMap *result = 0 ;
  
  SWIG_check_num_args("TCODMap",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODMap",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODMap",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (TCODMap *)new TCODMap(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODMap,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_setProperties(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("setProperties",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setProperties",1,"TCODMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setProperties",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setProperties",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("setProperties",4,"bool");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("setProperties",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_setProperties",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->setProperties(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_clear__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("clear",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"TCODMap *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("clear",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("clear",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_clear",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->clear(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_clear__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"TCODMap *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("clear",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_clear",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_clear__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"TCODMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_clear",1,SWIGTYPE_p_TCODMap);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_clear(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TCODMap_clear__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_TCODMap_clear__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_TCODMap_clear__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODMap_clear'\n"
    "  Possible C/C++ prototypes are:\n"
    "    clear(TCODMap *,bool,bool)\n"
    "    clear(TCODMap *,bool)\n"
    "    clear(TCODMap *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODMap_copy(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  TCODMap *arg2 = (TCODMap *) 0 ;
  
  SWIG_check_num_args("copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("copy",1,"TCODMap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("copy",2,"TCODMap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_copy",1,SWIGTYPE_p_TCODMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_copy",2,SWIGTYPE_p_TCODMap);
  }
  
  (arg1)->copy((TCODMap const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_computeFov__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  TCOD_fov_algorithm_t arg6 ;
  
  SWIG_check_num_args("computeFov",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("computeFov",1,"TCODMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("computeFov",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("computeFov",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("computeFov",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("computeFov",5,"bool");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("computeFov",6,"TCOD_fov_algorithm_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_computeFov",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  arg6 = (TCOD_fov_algorithm_t)(int)lua_tonumber(L, 6);
  (arg1)->computeFov(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_computeFov__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  
  SWIG_check_num_args("computeFov",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("computeFov",1,"TCODMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("computeFov",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("computeFov",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("computeFov",4,"int");
  if(!lua_isboolean(L,5)) SWIG_fail_arg("computeFov",5,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_computeFov",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (lua_toboolean(L, 5)!=0);
  (arg1)->computeFov(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_computeFov__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("computeFov",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("computeFov",1,"TCODMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("computeFov",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("computeFov",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("computeFov",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_computeFov",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  (arg1)->computeFov(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_computeFov__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("computeFov",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("computeFov",1,"TCODMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("computeFov",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("computeFov",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_computeFov",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->computeFov(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_computeFov(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TCODMap_computeFov__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODMap_computeFov__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              return _wrap_TCODMap_computeFov__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isboolean(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_TCODMap_computeFov__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODMap_computeFov'\n"
    "  Possible C/C++ prototypes are:\n"
    "    computeFov(TCODMap *,int,int,int,bool,TCOD_fov_algorithm_t)\n"
    "    computeFov(TCODMap *,int,int,int,bool)\n"
    "    computeFov(TCODMap *,int,int,int)\n"
    "    computeFov(TCODMap *,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODMap_isInFov(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("isInFov",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInFov",1,"TCODMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isInFov",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("isInFov",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_isInFov",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)((TCODMap const *)arg1)->isInFov(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_isTransparent(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("isTransparent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isTransparent",1,"TCODMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isTransparent",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("isTransparent",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_isTransparent",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)((TCODMap const *)arg1)->isTransparent(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_isWalkable(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("isWalkable",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isWalkable",1,"TCODMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isWalkable",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("isWalkable",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_isWalkable",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)((TCODMap const *)arg1)->isWalkable(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_getWidth(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  int result;
  
  SWIG_check_num_args("getWidth",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWidth",1,"TCODMap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_getWidth",1,SWIGTYPE_p_TCODMap);
  }
  
  result = (int)((TCODMap const *)arg1)->getWidth();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_getHeight(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  int result;
  
  SWIG_check_num_args("getHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getHeight",1,"TCODMap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_getHeight",1,SWIGTYPE_p_TCODMap);
  }
  
  result = (int)((TCODMap const *)arg1)->getHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_setInFov(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  SWIG_check_num_args("setInFov",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setInFov",1,"TCODMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setInFov",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setInFov",3,"int");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("setInFov",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_setInFov",1,SWIGTYPE_p_TCODMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (lua_toboolean(L, 4)!=0);
  (arg1)->setInFov(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMap_getNbCells(lua_State* L) {
  int SWIG_arg = 0;
  TCODMap *arg1 = (TCODMap *) 0 ;
  int result;
  
  SWIG_check_num_args("getNbCells",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNbCells",1,"TCODMap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODMap,0))){
    SWIG_fail_ptr("TCODMap_getNbCells",1,SWIGTYPE_p_TCODMap);
  }
  
  result = (int)((TCODMap const *)arg1)->getNbCells();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODMap(void *obj) {
TCODMap *arg1 = (TCODMap *) obj;
delete arg1;
}
static swig_lua_method swig_TCODMap_methods[] = {
    {"setProperties", _wrap_TCODMap_setProperties}, 
    {"clear", _wrap_TCODMap_clear}, 
    {"copy", _wrap_TCODMap_copy}, 
    {"computeFov", _wrap_TCODMap_computeFov}, 
    {"isInFov", _wrap_TCODMap_isInFov}, 
    {"isTransparent", _wrap_TCODMap_isTransparent}, 
    {"isWalkable", _wrap_TCODMap_isWalkable}, 
    {"getWidth", _wrap_TCODMap_getWidth}, 
    {"getHeight", _wrap_TCODMap_getHeight}, 
    {"setInFov", _wrap_TCODMap_setInFov}, 
    {"getNbCells", _wrap_TCODMap_getNbCells}, 
    {0,0}
};
static swig_lua_attribute swig_TCODMap_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODMap_bases[] = {0};
static const char *swig_TCODMap_base_names[] = {0};
static swig_lua_class _wrap_class_TCODMap = { "TCODMap", &SWIGTYPE_p_TCODMap,_wrap_new_TCODMap, swig_delete_TCODMap, swig_TCODMap_methods, swig_TCODMap_attributes, swig_TCODMap_bases, swig_TCODMap_base_names };

static int _wrap_TCODHeightMap_w_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("w",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_w_set",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->w = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_w_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  int result;
  
  SWIG_check_num_args("w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"TCODHeightMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_w_get",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  result = (int) ((arg1)->w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_h_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("h",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("h",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("h",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_h_set",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->h = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_h_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  int result;
  
  SWIG_check_num_args("h",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("h",1,"TCODHeightMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_h_get",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  result = (int) ((arg1)->h);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODHeightMap(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  TCODHeightMap *result = 0 ;
  
  SWIG_check_num_args("TCODHeightMap",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODHeightMap",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODHeightMap",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (TCODHeightMap *)new TCODHeightMap(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODHeightMap,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_setValue(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("setValue",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValue",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setValue",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setValue",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_setValue",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setValue(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("add",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("add",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_add",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->add(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_scale(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scale",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_scale",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->scale(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_clear(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  
  SWIG_check_num_args("clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"TCODHeightMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_clear",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  (arg1)->clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_clamp(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("clamp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clamp",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("clamp",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("clamp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_clamp",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->clamp(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_copy(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  TCODHeightMap *arg2 = (TCODHeightMap *) 0 ;
  
  SWIG_check_num_args("copy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("copy",1,"TCODHeightMap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("copy",2,"TCODHeightMap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_copy",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_copy",2,SWIGTYPE_p_TCODHeightMap);
  }
  
  (arg1)->copy((TCODHeightMap const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_normalize__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("normalize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("normalize",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("normalize",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_normalize",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->normalize(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_normalize__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("normalize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("normalize",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_normalize",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->normalize(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_normalize__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"TCODHeightMap *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_normalize",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_normalize(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODHeightMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TCODHeightMap_normalize__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODHeightMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TCODHeightMap_normalize__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODHeightMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TCODHeightMap_normalize__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODHeightMap_normalize'\n"
    "  Possible C/C++ prototypes are:\n"
    "    normalize(TCODHeightMap *,float,float)\n"
    "    normalize(TCODHeightMap *,float)\n"
    "    normalize(TCODHeightMap *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODHeightMap_lerp(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  TCODHeightMap *arg2 = (TCODHeightMap *) 0 ;
  TCODHeightMap *arg3 = (TCODHeightMap *) 0 ;
  float arg4 ;
  
  SWIG_check_num_args("lerp",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lerp",1,"TCODHeightMap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("lerp",2,"TCODHeightMap const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("lerp",3,"TCODHeightMap const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("lerp",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_lerp",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_lerp",2,SWIGTYPE_p_TCODHeightMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_lerp",3,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->lerp((TCODHeightMap const *)arg2,(TCODHeightMap const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  TCODHeightMap *arg2 = (TCODHeightMap *) 0 ;
  TCODHeightMap *arg3 = (TCODHeightMap *) 0 ;
  
  SWIG_check_num_args("add",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("add",1,"TCODHeightMap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("add",2,"TCODHeightMap const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("add",3,"TCODHeightMap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_add",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_add",2,SWIGTYPE_p_TCODHeightMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_add",3,SWIGTYPE_p_TCODHeightMap);
  }
  
  (arg1)->add((TCODHeightMap const *)arg2,(TCODHeightMap const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_add(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODHeightMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TCODHeightMap_add__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODHeightMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODHeightMap, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TCODHeightMap, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TCODHeightMap_add__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODHeightMap_add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    add(TCODHeightMap *,float)\n"
    "    add(TCODHeightMap *,TCODHeightMap const *,TCODHeightMap const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODHeightMap_multiply(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  TCODHeightMap *arg2 = (TCODHeightMap *) 0 ;
  TCODHeightMap *arg3 = (TCODHeightMap *) 0 ;
  
  SWIG_check_num_args("multiply",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multiply",1,"TCODHeightMap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("multiply",2,"TCODHeightMap const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("multiply",3,"TCODHeightMap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_multiply",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_multiply",2,SWIGTYPE_p_TCODHeightMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_multiply",3,SWIGTYPE_p_TCODHeightMap);
  }
  
  (arg1)->multiply((TCODHeightMap const *)arg2,(TCODHeightMap const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_addHill(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("addHill",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addHill",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("addHill",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addHill",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("addHill",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("addHill",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_addHill",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->addHill(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_digHill(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("digHill",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("digHill",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("digHill",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("digHill",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("digHill",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("digHill",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_digHill",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  (arg1)->digHill(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_rainErosion(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  int arg2 ;
  float arg3 ;
  float arg4 ;
  TCODRandom *arg5 = (TCODRandom *) 0 ;
  
  SWIG_check_num_args("rainErosion",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rainErosion",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rainErosion",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rainErosion",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rainErosion",4,"float");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("rainErosion",5,"TCODRandom *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_rainErosion",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODHeightMap_rainErosion",5,SWIGTYPE_p_TCODRandom);
  }
  
  (arg1)->rainErosion(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_kernelTransform(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  float *arg5 = (float *) 0 ;
  float arg6 ;
  float arg7 ;
  
  SWIG_check_num_args("kernelTransform",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("kernelTransform",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("kernelTransform",2,"int");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("kernelTransform",3,"int const *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("kernelTransform",4,"int const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("kernelTransform",5,"float const *");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("kernelTransform",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("kernelTransform",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_kernelTransform",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("TCODHeightMap_kernelTransform",3,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("TCODHeightMap_kernelTransform",4,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TCODHeightMap_kernelTransform",5,SWIGTYPE_p_float);
  }
  
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  (arg1)->kernelTransform(arg2,(int const *)arg3,(int const *)arg4,(float const *)arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_addVoronoi(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  TCODRandom *arg5 = (TCODRandom *) 0 ;
  
  SWIG_check_num_args("addVoronoi",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addVoronoi",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("addVoronoi",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addVoronoi",3,"int");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("addVoronoi",4,"float const *");
  if(!SWIG_isptrtype(L,5)) SWIG_fail_arg("addVoronoi",5,"TCODRandom *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_addVoronoi",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TCODHeightMap_addVoronoi",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODHeightMap_addVoronoi",5,SWIGTYPE_p_TCODRandom);
  }
  
  (arg1)->addVoronoi(arg2,arg3,(float const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_addFbm(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  TCODNoise *arg2 = (TCODNoise *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  
  SWIG_check_num_args("addFbm",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addFbm",1,"TCODHeightMap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("addFbm",2,"TCODNoise *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("addFbm",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("addFbm",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("addFbm",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("addFbm",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("addFbm",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("addFbm",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("addFbm",9,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_addFbm",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODNoise,0))){
    SWIG_fail_ptr("TCODHeightMap_addFbm",2,SWIGTYPE_p_TCODNoise);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  (arg1)->addFbm(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_scaleFbm(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  TCODNoise *arg2 = (TCODNoise *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  
  SWIG_check_num_args("scaleFbm",9,9)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scaleFbm",1,"TCODHeightMap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("scaleFbm",2,"TCODNoise *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("scaleFbm",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("scaleFbm",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("scaleFbm",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("scaleFbm",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("scaleFbm",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("scaleFbm",8,"float");
  if(!lua_isnumber(L,9)) SWIG_fail_arg("scaleFbm",9,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_scaleFbm",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODNoise,0))){
    SWIG_fail_ptr("TCODHeightMap_scaleFbm",2,SWIGTYPE_p_TCODNoise);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  arg9 = (float)lua_tonumber(L, 9);
  (arg1)->scaleFbm(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_digBezier(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  int *arg2 ;
  int *arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  SWIG_check_num_args("digBezier",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("digBezier",1,"TCODHeightMap *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("digBezier",2,"int [4]");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("digBezier",3,"int [4]");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("digBezier",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("digBezier",5,"float");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("digBezier",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("digBezier",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_digBezier",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("TCODHeightMap_digBezier",2,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("TCODHeightMap_digBezier",3,SWIGTYPE_p_int);
  }
  
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  (arg1)->digBezier(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_getValue(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("getValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValue",1,"TCODHeightMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getValue",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getValue",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_getValue",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)((TCODHeightMap const *)arg1)->getValue(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_getInterpolatedValue(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("getInterpolatedValue",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInterpolatedValue",1,"TCODHeightMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getInterpolatedValue",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getInterpolatedValue",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_getInterpolatedValue",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)((TCODHeightMap const *)arg1)->getInterpolatedValue(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_getSlope(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;
  
  SWIG_check_num_args("getSlope",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSlope",1,"TCODHeightMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getSlope",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getSlope",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_getSlope",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (float)((TCODHeightMap const *)arg1)->getSlope(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_getNormal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  float arg3 ;
  float *arg4 ;
  float arg5 ;
  
  SWIG_check_num_args("getNormal",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNormal",1,"TCODHeightMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getNormal",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getNormal",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("getNormal",4,"float [3]");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getNormal",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_getNormal",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TCODHeightMap_getNormal",4,SWIGTYPE_p_float);
  }
  
  arg5 = (float)lua_tonumber(L, 5);
  ((TCODHeightMap const *)arg1)->getNormal(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_getNormal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  float arg3 ;
  float *arg4 ;
  
  SWIG_check_num_args("getNormal",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getNormal",1,"TCODHeightMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getNormal",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getNormal",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("getNormal",4,"float [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_getNormal",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TCODHeightMap_getNormal",4,SWIGTYPE_p_float);
  }
  
  ((TCODHeightMap const *)arg1)->getNormal(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_getNormal(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODHeightMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_TCODHeightMap_getNormal__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODHeightMap, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_float, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TCODHeightMap_getNormal__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODHeightMap_getNormal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getNormal(TCODHeightMap const *,float,float,float [3],float)\n"
    "    getNormal(TCODHeightMap const *,float,float,float [3])\n");
  lua_error(L);return 0;
}


static int _wrap_TCODHeightMap_countCells(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  float arg3 ;
  int result;
  
  SWIG_check_num_args("countCells",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("countCells",1,"TCODHeightMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("countCells",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("countCells",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_countCells",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (int)((TCODHeightMap const *)arg1)->countCells(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_hasLandOnBorder(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  bool result;
  
  SWIG_check_num_args("hasLandOnBorder",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hasLandOnBorder",1,"TCODHeightMap const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("hasLandOnBorder",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_hasLandOnBorder",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (bool)((TCODHeightMap const *)arg1)->hasLandOnBorder(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_getMinMax(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float temp2 ;
  float temp3 ;
  
  arg2 = &temp2; 
  arg3 = &temp3; 
  SWIG_check_num_args("getMinMax",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMinMax",1,"TCODHeightMap const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_getMinMax",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  ((TCODHeightMap const *)arg1)->getMinMax(arg2,arg3);
  
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg3); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODHeightMap_islandify(lua_State* L) {
  int SWIG_arg = 0;
  TCODHeightMap *arg1 = (TCODHeightMap *) 0 ;
  float arg2 ;
  TCODRandom *arg3 = (TCODRandom *) 0 ;
  
  SWIG_check_num_args("islandify",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("islandify",1,"TCODHeightMap *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("islandify",2,"float");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("islandify",3,"TCODRandom *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODHeightMap,0))){
    SWIG_fail_ptr("TCODHeightMap_islandify",1,SWIGTYPE_p_TCODHeightMap);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODHeightMap_islandify",3,SWIGTYPE_p_TCODRandom);
  }
  
  (arg1)->islandify(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODHeightMap(void *obj) {
TCODHeightMap *arg1 = (TCODHeightMap *) obj;
delete arg1;
}
static swig_lua_method swig_TCODHeightMap_methods[] = {
    {"setValue", _wrap_TCODHeightMap_setValue}, 
    {"scale", _wrap_TCODHeightMap_scale}, 
    {"clear", _wrap_TCODHeightMap_clear}, 
    {"clamp", _wrap_TCODHeightMap_clamp}, 
    {"copy", _wrap_TCODHeightMap_copy}, 
    {"normalize", _wrap_TCODHeightMap_normalize}, 
    {"lerp", _wrap_TCODHeightMap_lerp}, 
    {"add", _wrap_TCODHeightMap_add}, 
    {"multiply", _wrap_TCODHeightMap_multiply}, 
    {"addHill", _wrap_TCODHeightMap_addHill}, 
    {"digHill", _wrap_TCODHeightMap_digHill}, 
    {"rainErosion", _wrap_TCODHeightMap_rainErosion}, 
    {"kernelTransform", _wrap_TCODHeightMap_kernelTransform}, 
    {"addVoronoi", _wrap_TCODHeightMap_addVoronoi}, 
    {"addFbm", _wrap_TCODHeightMap_addFbm}, 
    {"scaleFbm", _wrap_TCODHeightMap_scaleFbm}, 
    {"digBezier", _wrap_TCODHeightMap_digBezier}, 
    {"getValue", _wrap_TCODHeightMap_getValue}, 
    {"getInterpolatedValue", _wrap_TCODHeightMap_getInterpolatedValue}, 
    {"getSlope", _wrap_TCODHeightMap_getSlope}, 
    {"getNormal", _wrap_TCODHeightMap_getNormal}, 
    {"countCells", _wrap_TCODHeightMap_countCells}, 
    {"hasLandOnBorder", _wrap_TCODHeightMap_hasLandOnBorder}, 
    {"getMinMax", _wrap_TCODHeightMap_getMinMax}, 
    {"islandify", _wrap_TCODHeightMap_islandify}, 
    {0,0}
};
static swig_lua_attribute swig_TCODHeightMap_attributes[] = {
    { "w", _wrap_TCODHeightMap_w_get, _wrap_TCODHeightMap_w_set},
    { "h", _wrap_TCODHeightMap_h_get, _wrap_TCODHeightMap_h_set},
    {0,0,0}
};
static swig_lua_class *swig_TCODHeightMap_bases[] = {0};
static const char *swig_TCODHeightMap_base_names[] = {0};
static swig_lua_class _wrap_class_TCODHeightMap = { "TCODHeightMap", &SWIGTYPE_p_TCODHeightMap,_wrap_new_TCODHeightMap, swig_delete_TCODHeightMap, swig_TCODHeightMap_methods, swig_TCODHeightMap_attributes, swig_TCODHeightMap_bases, swig_TCODHeightMap_base_names };

static int _wrap_new_TCODImage__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  TCODImage *result = 0 ;
  
  SWIG_check_num_args("TCODImage",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODImage",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODImage",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  result = (TCODImage *)new TCODImage(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODImage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODImage__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  TCODImage *result = 0 ;
  
  SWIG_check_num_args("TCODImage",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODImage",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (TCODImage *)new TCODImage((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODImage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODImage__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TCODConsole *arg1 = (TCODConsole *) 0 ;
  TCODImage *result = 0 ;
  
  SWIG_check_num_args("TCODImage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCODImage",1,"TCODConsole const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("new_TCODImage",1,SWIGTYPE_p_TCODConsole);
  }
  
  result = (TCODImage *)new TCODImage((TCODConsole const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODImage,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODImage(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_TCODImage__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TCODImage__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TCODImage__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TCODImage'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TCODImage(int,int)\n"
    "    TCODImage(char const *)\n"
    "    TCODImage(TCODConsole const *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODImage_refreshConsole(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  
  SWIG_check_num_args("refreshConsole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("refreshConsole",1,"TCODImage *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("refreshConsole",2,"TCODConsole const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_refreshConsole",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_refreshConsole",2,SWIGTYPE_p_TCODConsole);
  }
  
  (arg1)->refreshConsole((TCODConsole const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_getSize(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int temp2 ;
  int temp3 ;
  
  arg2 = &temp2; 
  arg3 = &temp3; 
  SWIG_check_num_args("getSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSize",1,"TCODImage const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_getSize",1,SWIGTYPE_p_TCODImage);
  }
  
  ((TCODImage const *)arg1)->getSize(arg2,arg3);
  
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg3); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_getPixel(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  int arg2 ;
  int arg3 ;
  TCODColor result;
  
  SWIG_check_num_args("getPixel",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPixel",1,"TCODImage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getPixel",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_getPixel",1,SWIGTYPE_p_TCODImage);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = ((TCODImage const *)arg1)->getPixel(arg2,arg3);
  {
    TCODColor * resultptr = new TCODColor((const TCODColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCODColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_getAlpha(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("getAlpha",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAlpha",1,"TCODImage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getAlpha",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getAlpha",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_getAlpha",1,SWIGTYPE_p_TCODImage);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)((TCODImage const *)arg1)->getAlpha(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_isPixelTransparent(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  SWIG_check_num_args("isPixelTransparent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isPixelTransparent",1,"TCODImage const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("isPixelTransparent",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("isPixelTransparent",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_isPixelTransparent",1,SWIGTYPE_p_TCODImage);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (bool)((TCODImage const *)arg1)->isPixelTransparent(arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_getMipmapPixel(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  TCODColor result;
  
  SWIG_check_num_args("getMipmapPixel",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMipmapPixel",1,"TCODImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getMipmapPixel",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getMipmapPixel",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getMipmapPixel",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getMipmapPixel",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_getMipmapPixel",1,SWIGTYPE_p_TCODImage);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (arg1)->getMipmapPixel(arg2,arg3,arg4,arg5);
  {
    TCODColor * resultptr = new TCODColor((const TCODColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCODColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_clear(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODColor arg2 ;
  TCODColor *argp2 ;
  
  SWIG_check_num_args("clear",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("clear",1,"TCODImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("clear",2,"TCODColor const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_clear",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODImage_clear",2,SWIGTYPE_p_TCODColor);
  }
  arg2 = *argp2;
  
  (arg1)->clear(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_putPixel(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  int arg2 ;
  int arg3 ;
  TCODColor arg4 ;
  TCODColor *argp4 ;
  
  SWIG_check_num_args("putPixel",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("putPixel",1,"TCODImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("putPixel",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("putPixel",3,"int");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("putPixel",4,"TCODColor const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_putPixel",1,SWIGTYPE_p_TCODImage);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODImage_putPixel",4,SWIGTYPE_p_TCODColor);
  }
  arg4 = *argp4;
  
  (arg1)->putPixel(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_scale(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  int arg2 ;
  int arg3 ;
  
  SWIG_check_num_args("scale",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scale",1,"TCODImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scale",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("scale",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_scale",1,SWIGTYPE_p_TCODImage);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  (arg1)->scale(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_hflip(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  
  SWIG_check_num_args("hflip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("hflip",1,"TCODImage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_hflip",1,SWIGTYPE_p_TCODImage);
  }
  
  (arg1)->hflip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_vflip(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  
  SWIG_check_num_args("vflip",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vflip",1,"TCODImage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_vflip",1,SWIGTYPE_p_TCODImage);
  }
  
  (arg1)->vflip();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_rotate90__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("rotate90",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotate90",1,"TCODImage *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rotate90",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_rotate90",1,SWIGTYPE_p_TCODImage);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  (arg1)->rotate90(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_rotate90__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  
  SWIG_check_num_args("rotate90",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotate90",1,"TCODImage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_rotate90",1,SWIGTYPE_p_TCODImage);
  }
  
  (arg1)->rotate90();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_rotate90(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_TCODImage_rotate90__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TCODImage_rotate90__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODImage_rotate90'\n"
    "  Possible C/C++ prototypes are:\n"
    "    rotate90(TCODImage *,int)\n"
    "    rotate90(TCODImage *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODImage_invert(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  
  SWIG_check_num_args("invert",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("invert",1,"TCODImage *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_invert",1,SWIGTYPE_p_TCODImage);
  }
  
  (arg1)->invert();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_save(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("save",1,"TCODImage const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("save",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_save",1,SWIGTYPE_p_TCODImage);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  ((TCODImage const *)arg1)->save((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blitRect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  TCOD_bkgnd_flag_t arg7 ;
  
  SWIG_check_num_args("blitRect",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blitRect",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blitRect",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blitRect",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blitRect",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("blitRect",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("blitRect",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("blitRect",7,"TCOD_bkgnd_flag_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blitRect",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blitRect",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 7);
  ((TCODImage const *)arg1)->blitRect(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blitRect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  SWIG_check_num_args("blitRect",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blitRect",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blitRect",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blitRect",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blitRect",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("blitRect",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("blitRect",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blitRect",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blitRect",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  ((TCODImage const *)arg1)->blitRect(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blitRect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("blitRect",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blitRect",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blitRect",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blitRect",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blitRect",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("blitRect",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blitRect",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blitRect",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  ((TCODImage const *)arg1)->blitRect(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blitRect__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("blitRect",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blitRect",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blitRect",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blitRect",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blitRect",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blitRect",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blitRect",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  ((TCODImage const *)arg1)->blitRect(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blitRect(lua_State* L) {
  int argc;
  int argv[8]={
    1,2,3,4,5,6,7,8
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODImage_blitRect__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TCODImage_blitRect__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_TCODImage_blitRect__SWIG_1(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_TCODImage_blitRect__SWIG_0(L);
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODImage_blitRect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    blitRect(TCODImage const *,TCODConsole *,int,int,int,int,TCOD_bkgnd_flag_t)\n"
    "    blitRect(TCODImage const *,TCODConsole *,int,int,int,int)\n"
    "    blitRect(TCODImage const *,TCODConsole *,int,int,int)\n"
    "    blitRect(TCODImage const *,TCODConsole *,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODImage_blit__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  float arg3 ;
  float arg4 ;
  TCOD_bkgnd_flag_t arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  
  SWIG_check_num_args("blit",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blit",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blit",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blit",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("blit",5,"TCOD_bkgnd_flag_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("blit",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("blit",7,"float");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("blit",8,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blit",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blit",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  arg8 = (float)lua_tonumber(L, 8);
  ((TCODImage const *)arg1)->blit(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blit__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  float arg3 ;
  float arg4 ;
  TCOD_bkgnd_flag_t arg5 ;
  float arg6 ;
  float arg7 ;
  
  SWIG_check_num_args("blit",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blit",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blit",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blit",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("blit",5,"TCOD_bkgnd_flag_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("blit",6,"float");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("blit",7,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blit",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blit",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  arg7 = (float)lua_tonumber(L, 7);
  ((TCODImage const *)arg1)->blit(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blit__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  float arg3 ;
  float arg4 ;
  TCOD_bkgnd_flag_t arg5 ;
  float arg6 ;
  
  SWIG_check_num_args("blit",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blit",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blit",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blit",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("blit",5,"TCOD_bkgnd_flag_t");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("blit",6,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blit",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blit",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 5);
  arg6 = (float)lua_tonumber(L, 6);
  ((TCODImage const *)arg1)->blit(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blit__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  float arg3 ;
  float arg4 ;
  TCOD_bkgnd_flag_t arg5 ;
  
  SWIG_check_num_args("blit",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blit",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blit",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blit",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("blit",5,"TCOD_bkgnd_flag_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blit",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blit",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (TCOD_bkgnd_flag_t)(int)lua_tonumber(L, 5);
  ((TCODImage const *)arg1)->blit(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blit__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("blit",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blit",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blit",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blit",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blit",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blit",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blit",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  ((TCODImage const *)arg1)->blit(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blit(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODImage_blit__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TCODImage_blit__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_TCODImage_blit__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_TCODImage_blit__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_TCODImage_blit__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODImage_blit'\n"
    "  Possible C/C++ prototypes are:\n"
    "    blit(TCODImage const *,TCODConsole *,float,float,TCOD_bkgnd_flag_t,float,float,float)\n"
    "    blit(TCODImage const *,TCODConsole *,float,float,TCOD_bkgnd_flag_t,float,float)\n"
    "    blit(TCODImage const *,TCODConsole *,float,float,TCOD_bkgnd_flag_t,float)\n"
    "    blit(TCODImage const *,TCODConsole *,float,float,TCOD_bkgnd_flag_t)\n"
    "    blit(TCODImage const *,TCODConsole *,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODImage_setKeyColor(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODColor arg2 ;
  TCODColor *argp2 ;
  
  SWIG_check_num_args("setKeyColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setKeyColor",1,"TCODImage *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setKeyColor",2,"TCODColor const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_setKeyColor",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODImage_setKeyColor",2,SWIGTYPE_p_TCODColor);
  }
  arg2 = *argp2;
  
  (arg1)->setKeyColor(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blit2x__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  SWIG_check_num_args("blit2x",8,8)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blit2x",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blit2x",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blit2x",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blit2x",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("blit2x",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("blit2x",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("blit2x",7,"int");
  if(!lua_isnumber(L,8)) SWIG_fail_arg("blit2x",8,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blit2x",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blit2x",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  arg8 = (int)lua_tonumber(L, 8);
  ((TCODImage const *)arg1)->blit2x(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blit2x__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  SWIG_check_num_args("blit2x",7,7)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blit2x",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blit2x",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blit2x",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blit2x",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("blit2x",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("blit2x",6,"int");
  if(!lua_isnumber(L,7)) SWIG_fail_arg("blit2x",7,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blit2x",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blit2x",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  arg7 = (int)lua_tonumber(L, 7);
  ((TCODImage const *)arg1)->blit2x(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blit2x__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  SWIG_check_num_args("blit2x",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blit2x",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blit2x",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blit2x",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blit2x",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("blit2x",5,"int");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("blit2x",6,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blit2x",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blit2x",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  arg6 = (int)lua_tonumber(L, 6);
  ((TCODImage const *)arg1)->blit2x(arg2,arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blit2x__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  SWIG_check_num_args("blit2x",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blit2x",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blit2x",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blit2x",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blit2x",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("blit2x",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blit2x",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blit2x",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  ((TCODImage const *)arg1)->blit2x(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blit2x__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  TCODImage *arg1 = (TCODImage *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  int arg3 ;
  int arg4 ;
  
  SWIG_check_num_args("blit2x",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("blit2x",1,"TCODImage const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("blit2x",2,"TCODConsole *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("blit2x",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("blit2x",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODImage,0))){
    SWIG_fail_ptr("TCODImage_blit2x",1,SWIGTYPE_p_TCODImage);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODImage_blit2x",2,SWIGTYPE_p_TCODConsole);
  }
  
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  ((TCODImage const *)arg1)->blit2x(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODImage_blit2x(lua_State* L) {
  int argc;
  int argv[9]={
    1,2,3,4,5,6,7,8,9
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODImage_blit2x__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TCODImage_blit2x__SWIG_3(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_TCODImage_blit2x__SWIG_2(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  return _wrap_TCODImage_blit2x__SWIG_1(L);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODImage, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODConsole, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                {
                  _v = lua_isnumber(L,argv[6]);
                }
                if (_v) {
                  {
                    _v = lua_isnumber(L,argv[7]);
                  }
                  if (_v) {
                    return _wrap_TCODImage_blit2x__SWIG_0(L);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODImage_blit2x'\n"
    "  Possible C/C++ prototypes are:\n"
    "    blit2x(TCODImage const *,TCODConsole *,int,int,int,int,int,int)\n"
    "    blit2x(TCODImage const *,TCODConsole *,int,int,int,int,int)\n"
    "    blit2x(TCODImage const *,TCODConsole *,int,int,int,int)\n"
    "    blit2x(TCODImage const *,TCODConsole *,int,int,int)\n"
    "    blit2x(TCODImage const *,TCODConsole *,int,int)\n");
  lua_error(L);return 0;
}


static void swig_delete_TCODImage(void *obj) {
TCODImage *arg1 = (TCODImage *) obj;
delete arg1;
}
static swig_lua_method swig_TCODImage_methods[] = {
    {"refreshConsole", _wrap_TCODImage_refreshConsole}, 
    {"getSize", _wrap_TCODImage_getSize}, 
    {"getPixel", _wrap_TCODImage_getPixel}, 
    {"getAlpha", _wrap_TCODImage_getAlpha}, 
    {"isPixelTransparent", _wrap_TCODImage_isPixelTransparent}, 
    {"getMipmapPixel", _wrap_TCODImage_getMipmapPixel}, 
    {"clear", _wrap_TCODImage_clear}, 
    {"putPixel", _wrap_TCODImage_putPixel}, 
    {"scale", _wrap_TCODImage_scale}, 
    {"hflip", _wrap_TCODImage_hflip}, 
    {"vflip", _wrap_TCODImage_vflip}, 
    {"rotate90", _wrap_TCODImage_rotate90}, 
    {"invert", _wrap_TCODImage_invert}, 
    {"save", _wrap_TCODImage_save}, 
    {"blitRect", _wrap_TCODImage_blitRect}, 
    {"blit", _wrap_TCODImage_blit}, 
    {"setKeyColor", _wrap_TCODImage_setKeyColor}, 
    {"blit2x", _wrap_TCODImage_blit2x}, 
    {0,0}
};
static swig_lua_attribute swig_TCODImage_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODImage_bases[] = {0};
static const char *swig_TCODImage_base_names[] = {0};
static swig_lua_class _wrap_class_TCODImage = { "TCODImage", &SWIGTYPE_p_TCODImage,_wrap_new_TCODImage, swig_delete_TCODImage, swig_TCODImage_methods, swig_TCODImage_attributes, swig_TCODImage_bases, swig_TCODImage_base_names };

static int _wrap_TCODRandom_getInstance(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *result = 0 ;
  
  SWIG_check_num_args("TCODRandom::getInstance",0,0)
  result = (TCODRandom *)TCODRandom::getInstance();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODRandom,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODRandom__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_random_algo_t arg1 ;
  bool arg2 ;
  TCODRandom *result = 0 ;
  
  SWIG_check_num_args("TCODRandom",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODRandom",1,"TCOD_random_algo_t");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("TCODRandom",2,"bool");
  arg1 = (TCOD_random_algo_t)(int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (TCODRandom *)new TCODRandom(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODRandom,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODRandom__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *result = 0 ;
  
  SWIG_check_num_args("TCODRandom",0,0)
  result = (TCODRandom *)new TCODRandom();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODRandom,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODRandom__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  uint32 arg1 ;
  TCOD_random_algo_t arg2 ;
  TCODRandom *result = 0 ;
  
  SWIG_check_num_args("TCODRandom",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODRandom",1,"uint32");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODRandom",2,"TCOD_random_algo_t");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (uint32)lua_tonumber(L, 1);
  arg2 = (TCOD_random_algo_t)(int)lua_tonumber(L, 2);
  result = (TCODRandom *)new TCODRandom(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODRandom,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODRandom__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  uint32 arg1 ;
  TCODRandom *result = 0 ;
  
  SWIG_check_num_args("TCODRandom",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODRandom",1,"uint32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (uint32)lua_tonumber(L, 1);
  result = (TCODRandom *)new TCODRandom(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODRandom,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODRandom(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TCODRandom__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TCODRandom__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TCODRandom__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_TCODRandom__SWIG_2(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TCODRandom'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TCODRandom(TCOD_random_algo_t,bool)\n"
    "    TCODRandom()\n"
    "    TCODRandom(uint32,TCOD_random_algo_t)\n"
    "    TCODRandom(uint32)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODRandom_setDistribution(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  TCOD_distribution_t arg2 ;
  
  SWIG_check_num_args("setDistribution",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDistribution",1,"TCODRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setDistribution",2,"TCOD_distribution_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_setDistribution",1,SWIGTYPE_p_TCODRandom);
  }
  
  arg2 = (TCOD_distribution_t)(int)lua_tonumber(L, 2);
  (arg1)->setDistribution(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_getInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("getInt",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInt",1,"TCODRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getInt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getInt",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getInt",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_getInt",1,SWIGTYPE_p_TCODRandom);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->getInt(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_getInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("getInt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getInt",1,"TCODRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getInt",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getInt",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_getInt",1,SWIGTYPE_p_TCODRandom);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->getInt(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_getInt(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TCODRandom_getInt__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODRandom_getInt__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODRandom_getInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getInt(TCODRandom *,int,int,int)\n"
    "    getInt(TCODRandom *,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODRandom_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  SWIG_check_num_args("get",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get",1,"TCODRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("get",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("get",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("get",4,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_get",1,SWIGTYPE_p_TCODRandom);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (int)(arg1)->get(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  SWIG_check_num_args("get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get",1,"TCODRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("get",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("get",3,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_get",1,SWIGTYPE_p_TCODRandom);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (int)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_get(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TCODRandom_get__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODRandom_get__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODRandom_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    get(TCODRandom *,int,int,int)\n"
    "    get(TCODRandom *,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODRandom_getFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  SWIG_check_num_args("getFloat",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFloat",1,"TCODRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFloat",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getFloat",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getFloat",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_getFloat",1,SWIGTYPE_p_TCODRandom);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (float)(arg1)->getFloat(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_getFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("getFloat",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFloat",1,"TCODRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getFloat",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getFloat",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_getFloat",1,SWIGTYPE_p_TCODRandom);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->getFloat(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_getFloat(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TCODRandom_getFloat__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODRandom_getFloat__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODRandom_getFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFloat(TCODRandom *,float,float,float)\n"
    "    getFloat(TCODRandom *,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODRandom_getDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double result;
  
  SWIG_check_num_args("getDouble",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDouble",1,"TCODRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDouble",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getDouble",3,"double");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getDouble",4,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_getDouble",1,SWIGTYPE_p_TCODRandom);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  arg4 = (double)lua_tonumber(L, 4);
  result = (double)(arg1)->getDouble(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_getDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  
  SWIG_check_num_args("getDouble",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDouble",1,"TCODRandom *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getDouble",2,"double");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getDouble",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_getDouble",1,SWIGTYPE_p_TCODRandom);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (double)(arg1)->getDouble(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_getDouble(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TCODRandom_getDouble__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TCODRandom_getDouble__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODRandom_getDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getDouble(TCODRandom *,double,double,double)\n"
    "    getDouble(TCODRandom *,double,double)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODRandom_save(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  TCODRandom *result = 0 ;
  
  SWIG_check_num_args("save",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("save",1,"TCODRandom const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_save",1,SWIGTYPE_p_TCODRandom);
  }
  
  result = (TCODRandom *)((TCODRandom const *)arg1)->save();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODRandom,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_restore(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  TCODRandom *arg2 = (TCODRandom *) 0 ;
  
  SWIG_check_num_args("restore",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("restore",1,"TCODRandom *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("restore",2,"TCODRandom const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_restore",1,SWIGTYPE_p_TCODRandom);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_restore",2,SWIGTYPE_p_TCODRandom);
  }
  
  (arg1)->restore((TCODRandom const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_dice(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  char *arg2 = (char *) 0 ;
  TCOD_dice_t result;
  
  SWIG_check_num_args("dice",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dice",1,"TCODRandom *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("dice",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_dice",1,SWIGTYPE_p_TCODRandom);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->dice((char const *)arg2);
  {
    TCOD_dice_t * resultptr = new TCOD_dice_t((const TCOD_dice_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCOD_dice_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_diceRoll__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  TCOD_dice_t arg2 ;
  TCOD_dice_t *argp2 ;
  int result;
  
  SWIG_check_num_args("diceRoll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("diceRoll",1,"TCODRandom *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("diceRoll",2,"TCOD_dice_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_diceRoll",1,SWIGTYPE_p_TCODRandom);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TCOD_dice_t,0))){
    SWIG_fail_ptr("TCODRandom_diceRoll",2,SWIGTYPE_p_TCOD_dice_t);
  }
  arg2 = *argp2;
  
  result = (int)(arg1)->diceRoll(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_diceRoll__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODRandom *arg1 = (TCODRandom *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  SWIG_check_num_args("diceRoll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("diceRoll",1,"TCODRandom *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("diceRoll",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("TCODRandom_diceRoll",1,SWIGTYPE_p_TCODRandom);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (int)(arg1)->diceRoll((char const *)arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODRandom_diceRoll(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCOD_dice_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TCODRandom_diceRoll__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_TCODRandom_diceRoll__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODRandom_diceRoll'\n"
    "  Possible C/C++ prototypes are:\n"
    "    diceRoll(TCODRandom *,TCOD_dice_t)\n"
    "    diceRoll(TCODRandom *,char const *)\n");
  lua_error(L);return 0;
}


static void swig_delete_TCODRandom(void *obj) {
TCODRandom *arg1 = (TCODRandom *) obj;
delete arg1;
}
static swig_lua_method swig_TCODRandom_methods[] = {
    {"setDistribution", _wrap_TCODRandom_setDistribution}, 
    {"getInt", _wrap_TCODRandom_getInt}, 
    {"get", _wrap_TCODRandom_get}, 
    {"getFloat", _wrap_TCODRandom_getFloat}, 
    {"getDouble", _wrap_TCODRandom_getDouble}, 
    {"save", _wrap_TCODRandom_save}, 
    {"restore", _wrap_TCODRandom_restore}, 
    {"dice", _wrap_TCODRandom_dice}, 
    {"diceRoll", _wrap_TCODRandom_diceRoll}, 
    {0,0}
};
static swig_lua_attribute swig_TCODRandom_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODRandom_bases[] = {0};
static const char *swig_TCODRandom_base_names[] = {0};
static swig_lua_class _wrap_class_TCODRandom = { "TCODRandom", &SWIGTYPE_p_TCODRandom,_wrap_new_TCODRandom, swig_delete_TCODRandom, swig_TCODRandom_methods, swig_TCODRandom_attributes, swig_TCODRandom_bases, swig_TCODRandom_base_names };

static int _wrap_TCOD_dice_t_nb_rolls_set(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_dice_t *arg1 = (TCOD_dice_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("nb_rolls",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nb_rolls",1,"TCOD_dice_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nb_rolls",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_dice_t,0))){
    SWIG_fail_ptr("TCOD_dice_t_nb_rolls_set",1,SWIGTYPE_p_TCOD_dice_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nb_rolls = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_dice_t_nb_rolls_get(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_dice_t *arg1 = (TCOD_dice_t *) 0 ;
  int result;
  
  SWIG_check_num_args("nb_rolls",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nb_rolls",1,"TCOD_dice_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_dice_t,0))){
    SWIG_fail_ptr("TCOD_dice_t_nb_rolls_get",1,SWIGTYPE_p_TCOD_dice_t);
  }
  
  result = (int) ((arg1)->nb_rolls);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_dice_t_nb_faces_set(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_dice_t *arg1 = (TCOD_dice_t *) 0 ;
  int arg2 ;
  
  SWIG_check_num_args("nb_faces",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nb_faces",1,"TCOD_dice_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("nb_faces",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_dice_t,0))){
    SWIG_fail_ptr("TCOD_dice_t_nb_faces_set",1,SWIGTYPE_p_TCOD_dice_t);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  if (arg1) (arg1)->nb_faces = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_dice_t_nb_faces_get(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_dice_t *arg1 = (TCOD_dice_t *) 0 ;
  int result;
  
  SWIG_check_num_args("nb_faces",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nb_faces",1,"TCOD_dice_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_dice_t,0))){
    SWIG_fail_ptr("TCOD_dice_t_nb_faces_get",1,SWIGTYPE_p_TCOD_dice_t);
  }
  
  result = (int) ((arg1)->nb_faces);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_dice_t_multiplier_set(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_dice_t *arg1 = (TCOD_dice_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("multiplier",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multiplier",1,"TCOD_dice_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("multiplier",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_dice_t,0))){
    SWIG_fail_ptr("TCOD_dice_t_multiplier_set",1,SWIGTYPE_p_TCOD_dice_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->multiplier = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_dice_t_multiplier_get(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_dice_t *arg1 = (TCOD_dice_t *) 0 ;
  float result;
  
  SWIG_check_num_args("multiplier",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("multiplier",1,"TCOD_dice_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_dice_t,0))){
    SWIG_fail_ptr("TCOD_dice_t_multiplier_get",1,SWIGTYPE_p_TCOD_dice_t);
  }
  
  result = (float) ((arg1)->multiplier);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_dice_t_addsub_set(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_dice_t *arg1 = (TCOD_dice_t *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("addsub",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addsub",1,"TCOD_dice_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("addsub",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_dice_t,0))){
    SWIG_fail_ptr("TCOD_dice_t_addsub_set",1,SWIGTYPE_p_TCOD_dice_t);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->addsub = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_dice_t_addsub_get(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_dice_t *arg1 = (TCOD_dice_t *) 0 ;
  float result;
  
  SWIG_check_num_args("addsub",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addsub",1,"TCOD_dice_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_dice_t,0))){
    SWIG_fail_ptr("TCOD_dice_t_addsub_get",1,SWIGTYPE_p_TCOD_dice_t);
  }
  
  result = (float) ((arg1)->addsub);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCOD_dice_t(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_dice_t *result = 0 ;
  
  SWIG_check_num_args("TCOD_dice_t::TCOD_dice_t",0,0)
  result = (TCOD_dice_t *)new TCOD_dice_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCOD_dice_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCOD_dice_t(void *obj) {
TCOD_dice_t *arg1 = (TCOD_dice_t *) obj;
delete arg1;
}
static swig_lua_method swig_TCOD_dice_t_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TCOD_dice_t_attributes[] = {
    { "nb_rolls", _wrap_TCOD_dice_t_nb_rolls_get, _wrap_TCOD_dice_t_nb_rolls_set},
    { "nb_faces", _wrap_TCOD_dice_t_nb_faces_get, _wrap_TCOD_dice_t_nb_faces_set},
    { "multiplier", _wrap_TCOD_dice_t_multiplier_get, _wrap_TCOD_dice_t_multiplier_set},
    { "addsub", _wrap_TCOD_dice_t_addsub_get, _wrap_TCOD_dice_t_addsub_set},
    {0,0,0}
};
static swig_lua_class *swig_TCOD_dice_t_bases[] = {0};
static const char *swig_TCOD_dice_t_base_names[] = {0};
static swig_lua_class _wrap_class_TCOD_dice_t = { "TCOD_dice_t", &SWIGTYPE_p_TCOD_dice_t,_wrap_new_TCOD_dice_t, swig_delete_TCOD_dice_t, swig_TCOD_dice_t_methods, swig_TCOD_dice_t_attributes, swig_TCOD_dice_t_bases, swig_TCOD_dice_t_base_names };

static int _wrap_TCODMouse_showCursor(lua_State* L) {
  int SWIG_arg = 0;
  bool arg1 ;
  
  SWIG_check_num_args("TCODMouse::showCursor",1,1)
  if(!lua_isboolean(L,1)) SWIG_fail_arg("TCODMouse::showCursor",1,"bool");
  arg1 = (lua_toboolean(L, 1)!=0);
  TCODMouse::showCursor(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMouse_isCursorVisible(lua_State* L) {
  int SWIG_arg = 0;
  bool result;
  
  SWIG_check_num_args("TCODMouse::isCursorVisible",0,0)
  result = (bool)TCODMouse::isCursorVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMouse_moveMouse(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  
  SWIG_check_num_args("TCODMouse::move",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODMouse::move",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODMouse::move",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  TCODMouse::move(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODMouse_getStatus(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_mouse_t result;
  
  SWIG_check_num_args("TCODMouse::getStatus",0,0)
  result = TCODMouse::getStatus();
  {
    TCOD_mouse_t * resultptr = new TCOD_mouse_t((const TCOD_mouse_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCOD_mouse_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODMouse(lua_State* L) {
  int SWIG_arg = 0;
  TCODMouse *result = 0 ;
  
  SWIG_check_num_args("TCODMouse::TCODMouse",0,0)
  result = (TCODMouse *)new TCODMouse();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODMouse,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODMouse(void *obj) {
TCODMouse *arg1 = (TCODMouse *) obj;
delete arg1;
}
static swig_lua_method swig_TCODMouse_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TCODMouse_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODMouse_bases[] = {0};
static const char *swig_TCODMouse_base_names[] = {0};
static swig_lua_class _wrap_class_TCODMouse = { "TCODMouse", &SWIGTYPE_p_TCODMouse,_wrap_new_TCODMouse, swig_delete_TCODMouse, swig_TCODMouse_methods, swig_TCODMouse_attributes, swig_TCODMouse_bases, swig_TCODMouse_base_names };

static int _wrap_new_TCODNoise__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  TCOD_noise_type_t arg2 ;
  TCOD_noise_type_t *argp2 ;
  TCODNoise *result = 0 ;
  
  SWIG_check_num_args("TCODNoise",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODNoise",1,"int");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TCODNoise",2,"TCOD_noise_type_t");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TCOD_noise_type_t,0))){
    SWIG_fail_ptr("new_TCODNoise",2,SWIGTYPE_p_TCOD_noise_type_t);
  }
  arg2 = *argp2;
  
  result = (TCODNoise *)new TCODNoise(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODNoise__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  TCODNoise *result = 0 ;
  
  SWIG_check_num_args("TCODNoise",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODNoise",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  result = (TCODNoise *)new TCODNoise(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODNoise__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  TCODRandom *arg2 = (TCODRandom *) 0 ;
  TCOD_noise_type_t arg3 ;
  TCOD_noise_type_t *argp3 ;
  TCODNoise *result = 0 ;
  
  SWIG_check_num_args("TCODNoise",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODNoise",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TCODNoise",2,"TCODRandom *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("TCODNoise",3,"TCOD_noise_type_t");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("new_TCODNoise",2,SWIGTYPE_p_TCODRandom);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_TCOD_noise_type_t,0))){
    SWIG_fail_ptr("new_TCODNoise",3,SWIGTYPE_p_TCOD_noise_type_t);
  }
  arg3 = *argp3;
  
  result = (TCODNoise *)new TCODNoise(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODNoise__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  TCODRandom *arg2 = (TCODRandom *) 0 ;
  TCODNoise *result = 0 ;
  
  SWIG_check_num_args("TCODNoise",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODNoise",1,"int");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TCODNoise",2,"TCODRandom *");
  arg1 = (int)lua_tonumber(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("new_TCODNoise",2,SWIGTYPE_p_TCODRandom);
  }
  
  result = (TCODNoise *)new TCODNoise(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODNoise__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  TCOD_noise_type_t arg4 ;
  TCOD_noise_type_t *argp4 ;
  TCODNoise *result = 0 ;
  
  SWIG_check_num_args("TCODNoise",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODNoise",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODNoise",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODNoise",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("TCODNoise",4,"TCOD_noise_type_t");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_TCOD_noise_type_t,0))){
    SWIG_fail_ptr("new_TCODNoise",4,SWIGTYPE_p_TCOD_noise_type_t);
  }
  arg4 = *argp4;
  
  result = (TCODNoise *)new TCODNoise(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODNoise__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  TCODNoise *result = 0 ;
  
  SWIG_check_num_args("TCODNoise",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODNoise",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODNoise",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODNoise",3,"float");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (TCODNoise *)new TCODNoise(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODNoise__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  TCODRandom *arg4 = (TCODRandom *) 0 ;
  TCOD_noise_type_t arg5 ;
  TCOD_noise_type_t *argp5 ;
  TCODNoise *result = 0 ;
  
  SWIG_check_num_args("TCODNoise",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODNoise",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODNoise",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODNoise",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TCODNoise",4,"TCODRandom *");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("TCODNoise",5,"TCOD_noise_type_t");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("new_TCODNoise",4,SWIGTYPE_p_TCODRandom);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&argp5,SWIGTYPE_p_TCOD_noise_type_t,0))){
    SWIG_fail_ptr("new_TCODNoise",5,SWIGTYPE_p_TCOD_noise_type_t);
  }
  arg5 = *argp5;
  
  result = (TCODNoise *)new TCODNoise(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODNoise__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  TCODRandom *arg4 = (TCODRandom *) 0 ;
  TCODNoise *result = 0 ;
  
  SWIG_check_num_args("TCODNoise",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODNoise",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODNoise",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODNoise",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("TCODNoise",4,"TCODRandom *");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_TCODRandom,0))){
    SWIG_fail_ptr("new_TCODNoise",4,SWIGTYPE_p_TCODRandom);
  }
  
  result = (TCODNoise *)new TCODNoise(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODNoise,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODNoise(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_TCODNoise__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCOD_noise_type_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_TCODNoise__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_TCODNoise__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TCOD_noise_type_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_TCODNoise__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_TCODNoise__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_TCOD_noise_type_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_TCODNoise__SWIG_4(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_new_TCODNoise__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_TCODRandom, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            {
              void *ptr;
              if (lua_isuserdata(L,argv[4])==0 || SWIG_ConvertPtr(L,argv[4], (void **) &ptr, SWIGTYPE_p_TCOD_noise_type_t, 0)) {
                _v = 0;
              } else {
                _v = 1;
              }
            }
            if (_v) {
              return _wrap_new_TCODNoise__SWIG_6(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TCODNoise'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TCODNoise(int,TCOD_noise_type_t)\n"
    "    TCODNoise(int)\n"
    "    TCODNoise(int,TCODRandom *,TCOD_noise_type_t)\n"
    "    TCODNoise(int,TCODRandom *)\n"
    "    TCODNoise(int,float,float,TCOD_noise_type_t)\n"
    "    TCODNoise(int,float,float)\n"
    "    TCODNoise(int,float,float,TCODRandom *,TCOD_noise_type_t)\n"
    "    TCODNoise(int,float,float,TCODRandom *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODNoise_setType(lua_State* L) {
  int SWIG_arg = 0;
  TCODNoise *arg1 = (TCODNoise *) 0 ;
  TCOD_noise_type_t arg2 ;
  TCOD_noise_type_t *argp2 ;
  
  SWIG_check_num_args("setType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setType",1,"TCODNoise *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setType",2,"TCOD_noise_type_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODNoise,0))){
    SWIG_fail_ptr("TCODNoise_setType",1,SWIGTYPE_p_TCODNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TCOD_noise_type_t,0))){
    SWIG_fail_ptr("TCODNoise_setType",2,SWIGTYPE_p_TCOD_noise_type_t);
  }
  arg2 = *argp2;
  
  (arg1)->setType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNoise_get__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODNoise *arg1 = (TCODNoise *) 0 ;
  float *arg2 = (float *) 0 ;
  TCOD_noise_type_t arg3 ;
  TCOD_noise_type_t *argp3 ;
  float result;
  
  SWIG_check_num_args("get",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get",1,"TCODNoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("get",2,"float *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("get",3,"TCOD_noise_type_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODNoise,0))){
    SWIG_fail_ptr("TCODNoise_get",1,SWIGTYPE_p_TCODNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TCODNoise_get",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_TCOD_noise_type_t,0))){
    SWIG_fail_ptr("TCODNoise_get",3,SWIGTYPE_p_TCOD_noise_type_t);
  }
  arg3 = *argp3;
  
  result = (float)(arg1)->get(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNoise_get__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODNoise *arg1 = (TCODNoise *) 0 ;
  float *arg2 = (float *) 0 ;
  float result;
  
  SWIG_check_num_args("get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("get",1,"TCODNoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("get",2,"float *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODNoise,0))){
    SWIG_fail_ptr("TCODNoise_get",1,SWIGTYPE_p_TCODNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TCODNoise_get",2,SWIGTYPE_p_float);
  }
  
  result = (float)(arg1)->get(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNoise_get(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODNoise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TCODNoise_get__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODNoise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_TCOD_noise_type_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TCODNoise_get__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODNoise_get'\n"
    "  Possible C/C++ prototypes are:\n"
    "    get(TCODNoise *,float *,TCOD_noise_type_t)\n"
    "    get(TCODNoise *,float *)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODNoise_getFbm__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODNoise *arg1 = (TCODNoise *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  TCOD_noise_type_t arg4 ;
  TCOD_noise_type_t *argp4 ;
  float result;
  
  SWIG_check_num_args("getFbm",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFbm",1,"TCODNoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("getFbm",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getFbm",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getFbm",4,"TCOD_noise_type_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODNoise,0))){
    SWIG_fail_ptr("TCODNoise_getFbm",1,SWIGTYPE_p_TCODNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TCODNoise_getFbm",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_TCOD_noise_type_t,0))){
    SWIG_fail_ptr("TCODNoise_getFbm",4,SWIGTYPE_p_TCOD_noise_type_t);
  }
  arg4 = *argp4;
  
  result = (float)(arg1)->getFbm(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNoise_getFbm__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODNoise *arg1 = (TCODNoise *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("getFbm",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFbm",1,"TCODNoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("getFbm",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getFbm",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODNoise,0))){
    SWIG_fail_ptr("TCODNoise_getFbm",1,SWIGTYPE_p_TCODNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TCODNoise_getFbm",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->getFbm(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNoise_getFbm(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODNoise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TCODNoise_getFbm__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODNoise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_TCOD_noise_type_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_TCODNoise_getFbm__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODNoise_getFbm'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFbm(TCODNoise *,float *,float,TCOD_noise_type_t)\n"
    "    getFbm(TCODNoise *,float *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODNoise_getTurbulence__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODNoise *arg1 = (TCODNoise *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  TCOD_noise_type_t arg4 ;
  TCOD_noise_type_t *argp4 ;
  float result;
  
  SWIG_check_num_args("getTurbulence",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTurbulence",1,"TCODNoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("getTurbulence",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getTurbulence",3,"float");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("getTurbulence",4,"TCOD_noise_type_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODNoise,0))){
    SWIG_fail_ptr("TCODNoise_getTurbulence",1,SWIGTYPE_p_TCODNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TCODNoise_getTurbulence",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&argp4,SWIGTYPE_p_TCOD_noise_type_t,0))){
    SWIG_fail_ptr("TCODNoise_getTurbulence",4,SWIGTYPE_p_TCOD_noise_type_t);
  }
  arg4 = *argp4;
  
  result = (float)(arg1)->getTurbulence(arg2,arg3,arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNoise_getTurbulence__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODNoise *arg1 = (TCODNoise *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float result;
  
  SWIG_check_num_args("getTurbulence",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTurbulence",1,"TCODNoise *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("getTurbulence",2,"float *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getTurbulence",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODNoise,0))){
    SWIG_fail_ptr("TCODNoise_getTurbulence",1,SWIGTYPE_p_TCODNoise);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("TCODNoise_getTurbulence",2,SWIGTYPE_p_float);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (float)(arg1)->getTurbulence(arg2,arg3);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODNoise_getTurbulence(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODNoise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TCODNoise_getTurbulence__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODNoise, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_float, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_TCOD_noise_type_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_TCODNoise_getTurbulence__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODNoise_getTurbulence'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getTurbulence(TCODNoise *,float *,float,TCOD_noise_type_t)\n"
    "    getTurbulence(TCODNoise *,float *,float)\n");
  lua_error(L);return 0;
}


static void swig_delete_TCODNoise(void *obj) {
TCODNoise *arg1 = (TCODNoise *) obj;
delete arg1;
}
static swig_lua_method swig_TCODNoise_methods[] = {
    {"setType", _wrap_TCODNoise_setType}, 
    {"get", _wrap_TCODNoise_get}, 
    {"getFbm", _wrap_TCODNoise_getFbm}, 
    {"getTurbulence", _wrap_TCODNoise_getTurbulence}, 
    {0,0}
};
static swig_lua_attribute swig_TCODNoise_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODNoise_bases[] = {0};
static const char *swig_TCODNoise_base_names[] = {0};
static swig_lua_class _wrap_class_TCODNoise = { "TCODNoise", &SWIGTYPE_p_TCODNoise,_wrap_new_TCODNoise, swig_delete_TCODNoise, swig_TCODNoise_methods, swig_TCODNoise_attributes, swig_TCODNoise_bases, swig_TCODNoise_base_names };

static int _wrap_TCODSystem_setFps(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  
  SWIG_check_num_args("TCODSystem::setFps",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODSystem::setFps",1,"int");
  arg1 = (int)lua_tonumber(L, 1);
  TCODSystem::setFps(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_getFps(lua_State* L) {
  int SWIG_arg = 0;
  int result;
  
  SWIG_check_num_args("TCODSystem::getFps",0,0)
  result = (int)TCODSystem::getFps();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_getLastFrameLength(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("TCODSystem::getLastFrameLength",0,0)
  result = (float)TCODSystem::getLastFrameLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_sleepMilli(lua_State* L) {
  int SWIG_arg = 0;
  uint32 arg1 ;
  
  SWIG_check_num_args("TCODSystem::sleepMilli",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODSystem::sleepMilli",1,"uint32");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (uint32)lua_tonumber(L, 1);
  TCODSystem::sleepMilli(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_getElapsedMilli(lua_State* L) {
  int SWIG_arg = 0;
  uint32 result;
  
  SWIG_check_num_args("TCODSystem::getElapsedMilli",0,0)
  result = (uint32)TCODSystem::getElapsedMilli();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_getElapsedSeconds(lua_State* L) {
  int SWIG_arg = 0;
  float result;
  
  SWIG_check_num_args("TCODSystem::getElapsedSeconds",0,0)
  result = (float)TCODSystem::getElapsedSeconds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_saveScreenshot(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  
  SWIG_check_num_args("TCODSystem::saveScreenshot",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODSystem::saveScreenshot",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  TCODSystem::saveScreenshot((char const *)arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_fileExists(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("TCODSystem::fileExists",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("TCODSystem::fileExists",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (bool)TCODSystem::fileExists((char const *)arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_forceFullscreenResolution(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  
  SWIG_check_num_args("TCODSystem::forceFullscreenResolution",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODSystem::forceFullscreenResolution",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODSystem::forceFullscreenResolution",2,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  TCODSystem::forceFullscreenResolution(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_getCurrentResolution(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int temp1 ;
  int temp2 ;
  
  arg1 = &temp1; 
  arg2 = &temp2; 
  SWIG_check_num_args("TCODSystem::getCurrentResolution",0,0)
  TCODSystem::getCurrentResolution(arg1,arg2);
  
  lua_pushnumber(L, (lua_Number) *arg1); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_getFullscreenOffsets(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  
  SWIG_check_num_args("TCODSystem::getFullscreenOffsets",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("TCODSystem::getFullscreenOffsets",1,"int *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("TCODSystem::getFullscreenOffsets",2,"int *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("TCODSystem_getFullscreenOffsets",1,SWIGTYPE_p_int);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_int,0))){
    SWIG_fail_ptr("TCODSystem_getFullscreenOffsets",2,SWIGTYPE_p_int);
  }
  
  TCODSystem::getFullscreenOffsets(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_getCharSize(lua_State* L) {
  int SWIG_arg = 0;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int temp1 ;
  int temp2 ;
  
  arg1 = &temp1; 
  arg2 = &temp2; 
  SWIG_check_num_args("TCODSystem::getCharSize",0,0)
  TCODSystem::getCharSize(arg1,arg2);
  
  lua_pushnumber(L, (lua_Number) *arg1); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_setRenderer(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_renderer_t arg1 ;
  
  SWIG_check_num_args("TCODSystem::setRenderer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODSystem::setRenderer",1,"TCOD_renderer_t");
  arg1 = (TCOD_renderer_t)(int)lua_tonumber(L, 1);
  TCODSystem::setRenderer(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODSystem_getRenderer(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_renderer_t result;
  
  SWIG_check_num_args("TCODSystem::getRenderer",0,0)
  result = (TCOD_renderer_t)TCODSystem::getRenderer();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODSystem(lua_State* L) {
  int SWIG_arg = 0;
  TCODSystem *result = 0 ;
  
  SWIG_check_num_args("TCODSystem::TCODSystem",0,0)
  result = (TCODSystem *)new TCODSystem();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODSystem,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODSystem(void *obj) {
TCODSystem *arg1 = (TCODSystem *) obj;
delete arg1;
}
static swig_lua_method swig_TCODSystem_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TCODSystem_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODSystem_bases[] = {0};
static const char *swig_TCODSystem_base_names[] = {0};
static swig_lua_class _wrap_class_TCODSystem = { "TCODSystem", &SWIGTYPE_p_TCODSystem,_wrap_new_TCODSystem, swig_delete_TCODSystem, swig_TCODSystem_methods, swig_TCODSystem_attributes, swig_TCODSystem_bases, swig_TCODSystem_base_names };

static int _wrap_new_TCODText(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  TCODText *result = 0 ;
  
  SWIG_check_num_args("TCODText",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODText",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODText",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODText",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("TCODText",4,"int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("TCODText",5,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  result = (TCODText *)new TCODText(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODText,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODText_setProperties(lua_State* L) {
  int SWIG_arg = 0;
  TCODText *arg1 = (TCODText *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  
  SWIG_check_num_args("setProperties",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setProperties",1,"TCODText *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setProperties",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setProperties",3,"int");
  if(!lua_isstring(L,4)) SWIG_fail_arg("setProperties",4,"char const *");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("setProperties",5,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODText,0))){
    SWIG_fail_ptr("TCODText_setProperties",1,SWIGTYPE_p_TCODText);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (char *)lua_tostring(L, 4);
  arg5 = (int)lua_tonumber(L, 5);
  (arg1)->setProperties(arg2,arg3,(char const *)arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODText_setColors(lua_State* L) {
  int SWIG_arg = 0;
  TCODText *arg1 = (TCODText *) 0 ;
  TCODColor arg2 ;
  TCODColor arg3 ;
  float arg4 ;
  TCODColor *argp2 ;
  TCODColor *argp3 ;
  
  SWIG_check_num_args("setColors",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setColors",1,"TCODText *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setColors",2,"TCODColor");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setColors",3,"TCODColor");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setColors",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODText,0))){
    SWIG_fail_ptr("TCODText_setColors",1,SWIGTYPE_p_TCODText);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODText_setColors",2,SWIGTYPE_p_TCODColor);
  }
  arg2 = *argp2;
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODText_setColors",3,SWIGTYPE_p_TCODColor);
  }
  arg3 = *argp3;
  
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setColors(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODText_update(lua_State* L) {
  int SWIG_arg = 0;
  TCODText *arg1 = (TCODText *) 0 ;
  TCOD_key_t arg2 ;
  TCOD_key_t *argp2 ;
  bool result;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"TCODText *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("update",2,"TCOD_key_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODText,0))){
    SWIG_fail_ptr("TCODText_update",1,SWIGTYPE_p_TCODText);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCODText_update",2,SWIGTYPE_p_TCOD_key_t);
  }
  arg2 = *argp2;
  
  result = (bool)(arg1)->update(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODText_render(lua_State* L) {
  int SWIG_arg = 0;
  TCODText *arg1 = (TCODText *) 0 ;
  TCODConsole *arg2 = (TCODConsole *) 0 ;
  
  SWIG_check_num_args("render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("render",1,"TCODText *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("render",2,"TCODConsole *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODText,0))){
    SWIG_fail_ptr("TCODText_render",1,SWIGTYPE_p_TCODText);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODConsole,0))){
    SWIG_fail_ptr("TCODText_render",2,SWIGTYPE_p_TCODConsole);
  }
  
  (arg1)->render(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODText_getText(lua_State* L) {
  int SWIG_arg = 0;
  TCODText *arg1 = (TCODText *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("getText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getText",1,"TCODText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODText,0))){
    SWIG_fail_ptr("TCODText_getText",1,SWIGTYPE_p_TCODText);
  }
  
  result = (char *)(arg1)->getText();
  lua_pushstring(L,(const char*)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODText_reset(lua_State* L) {
  int SWIG_arg = 0;
  TCODText *arg1 = (TCODText *) 0 ;
  
  SWIG_check_num_args("reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reset",1,"TCODText *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODText,0))){
    SWIG_fail_ptr("TCODText_reset",1,SWIGTYPE_p_TCODText);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODText(void *obj) {
TCODText *arg1 = (TCODText *) obj;
delete arg1;
}
static swig_lua_method swig_TCODText_methods[] = {
    {"setProperties", _wrap_TCODText_setProperties}, 
    {"setColors", _wrap_TCODText_setColors}, 
    {"update", _wrap_TCODText_update}, 
    {"render", _wrap_TCODText_render}, 
    {"getText", _wrap_TCODText_getText}, 
    {"reset", _wrap_TCODText_reset}, 
    {0,0}
};
static swig_lua_attribute swig_TCODText_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODText_bases[] = {0};
static const char *swig_TCODText_base_names[] = {0};
static swig_lua_class _wrap_class_TCODText = { "TCODText", &SWIGTYPE_p_TCODText,_wrap_new_TCODText, swig_delete_TCODText, swig_TCODText_methods, swig_TCODText_attributes, swig_TCODText_bases, swig_TCODText_base_names };

static int _wrap_TCODCBackgroundHelpers_CreateAddAlphaBackground(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  TCOD_bkgnd_flag_t result;
  
  SWIG_check_num_args("TCODCBackgroundHelpers::CreateAddAlphaBackground",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODCBackgroundHelpers::CreateAddAlphaBackground",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (TCOD_bkgnd_flag_t)TCODCBackgroundHelpers::CreateAddAlphaBackground(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODCBackgroundHelpers_CreateAlphaBackground(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  TCOD_bkgnd_flag_t result;
  
  SWIG_check_num_args("TCODCBackgroundHelpers::CreateAlphaBackground",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODCBackgroundHelpers::CreateAlphaBackground",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (TCOD_bkgnd_flag_t)TCODCBackgroundHelpers::CreateAlphaBackground(arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODCBackgroundHelpers(lua_State* L) {
  int SWIG_arg = 0;
  TCODCBackgroundHelpers *result = 0 ;
  
  SWIG_check_num_args("TCODCBackgroundHelpers::TCODCBackgroundHelpers",0,0)
  result = (TCODCBackgroundHelpers *)new TCODCBackgroundHelpers();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODCBackgroundHelpers,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODCBackgroundHelpers(void *obj) {
TCODCBackgroundHelpers *arg1 = (TCODCBackgroundHelpers *) obj;
delete arg1;
}
static swig_lua_method swig_TCODCBackgroundHelpers_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TCODCBackgroundHelpers_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_TCODCBackgroundHelpers_bases[] = {0};
static const char *swig_TCODCBackgroundHelpers_base_names[] = {0};
static swig_lua_class _wrap_class_TCODCBackgroundHelpers = { "TCODCBackgroundHelpers", &SWIGTYPE_p_TCODCBackgroundHelpers,_wrap_new_TCODCBackgroundHelpers, swig_delete_TCODCBackgroundHelpers, swig_TCODCBackgroundHelpers_methods, swig_TCODCBackgroundHelpers_attributes, swig_TCODCBackgroundHelpers_bases, swig_TCODCBackgroundHelpers_base_names };

static int _wrap_TCOD_key_t_vk_set(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  TCOD_keycode_t arg2 ;
  
  SWIG_check_num_args("vk",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vk",1,"TCOD_key_t *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vk",2,"TCOD_keycode_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_vk_set",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  arg2 = (TCOD_keycode_t)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->vk = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_vk_get(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  TCOD_keycode_t result;
  
  SWIG_check_num_args("vk",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("vk",1,"TCOD_key_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_vk_get",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  result = (TCOD_keycode_t) ((arg1)->vk);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_c_set(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  char arg2 ;
  
  SWIG_check_num_args("c",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("c",1,"TCOD_key_t *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("c",2,"char");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_c_set",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  if (arg1) (arg1)->c = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_c_get(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  char result;
  
  SWIG_check_num_args("c",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("c",1,"TCOD_key_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_c_get",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  result = (char) ((arg1)->c);
  lua_pushfstring(L,"%c",result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_pressed_set(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("pressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pressed",1,"TCOD_key_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("pressed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_pressed_set",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->pressed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_pressed_get(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("pressed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("pressed",1,"TCOD_key_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_pressed_get",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  result = (bool) ((arg1)->pressed);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_lalt_set(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("lalt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lalt",1,"TCOD_key_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("lalt",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_lalt_set",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->lalt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_lalt_get(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("lalt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lalt",1,"TCOD_key_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_lalt_get",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  result = (bool) ((arg1)->lalt);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_lctrl_set(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("lctrl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lctrl",1,"TCOD_key_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("lctrl",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_lctrl_set",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->lctrl = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_lctrl_get(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("lctrl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lctrl",1,"TCOD_key_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_lctrl_get",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  result = (bool) ((arg1)->lctrl);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_ralt_set(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ralt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ralt",1,"TCOD_key_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ralt",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_ralt_set",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ralt = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_ralt_get(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("ralt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ralt",1,"TCOD_key_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_ralt_get",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  result = (bool) ((arg1)->ralt);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_rctrl_set(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("rctrl",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rctrl",1,"TCOD_key_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("rctrl",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_rctrl_set",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->rctrl = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_rctrl_get(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("rctrl",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rctrl",1,"TCOD_key_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_rctrl_get",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  result = (bool) ((arg1)->rctrl);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_shift_set(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("shift",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shift",1,"TCOD_key_t *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("shift",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_shift_set",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->shift = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCOD_key_t_shift_get(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *arg1 = (TCOD_key_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("shift",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shift",1,"TCOD_key_t *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCOD_key_t,0))){
    SWIG_fail_ptr("TCOD_key_t_shift_get",1,SWIGTYPE_p_TCOD_key_t);
  }
  
  result = (bool) ((arg1)->shift);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCOD_key_t(lua_State* L) {
  int SWIG_arg = 0;
  TCOD_key_t *result = 0 ;
  
  SWIG_check_num_args("TCOD_key_t::TCOD_key_t",0,0)
  result = (TCOD_key_t *)new TCOD_key_t();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCOD_key_t,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCOD_key_t(void *obj) {
TCOD_key_t *arg1 = (TCOD_key_t *) obj;
delete arg1;
}
static swig_lua_method swig_TCOD_key_t_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_TCOD_key_t_attributes[] = {
    { "vk", _wrap_TCOD_key_t_vk_get, _wrap_TCOD_key_t_vk_set},
    { "c", _wrap_TCOD_key_t_c_get, _wrap_TCOD_key_t_c_set},
    { "pressed", _wrap_TCOD_key_t_pressed_get, _wrap_TCOD_key_t_pressed_set},
    { "lalt", _wrap_TCOD_key_t_lalt_get, _wrap_TCOD_key_t_lalt_set},
    { "lctrl", _wrap_TCOD_key_t_lctrl_get, _wrap_TCOD_key_t_lctrl_set},
    { "ralt", _wrap_TCOD_key_t_ralt_get, _wrap_TCOD_key_t_ralt_set},
    { "rctrl", _wrap_TCOD_key_t_rctrl_get, _wrap_TCOD_key_t_rctrl_set},
    { "shift", _wrap_TCOD_key_t_shift_get, _wrap_TCOD_key_t_shift_set},
    {0,0,0}
};
static swig_lua_class *swig_TCOD_key_t_bases[] = {0};
static const char *swig_TCOD_key_t_base_names[] = {0};
static swig_lua_class _wrap_class_TCOD_key_t = { "TCOD_key_t", &SWIGTYPE_p_TCOD_key_t,_wrap_new_TCOD_key_t, swig_delete_TCOD_key_t, swig_TCOD_key_t_methods, swig_TCOD_key_t_attributes, swig_TCOD_key_t_bases, swig_TCOD_key_t_base_names };

static int _wrap_TCODColor_r_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("r",1,"TCODColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("r",2,"uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_r_set",1,SWIGTYPE_p_TCODColor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_r_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("r",1,"TCODColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_r_get",1,SWIGTYPE_p_TCODColor);
  }
  
  result = (uint8) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_g_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("g",1,"TCODColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("g",2,"uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_g_set",1,SWIGTYPE_p_TCODColor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_g_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("g",1,"TCODColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_g_get",1,SWIGTYPE_p_TCODColor);
  }
  
  result = (uint8) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_b_set(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  uint8 arg2 ;
  
  SWIG_check_num_args("b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("b",1,"TCODColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("b",2,"uint8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_b_set",1,SWIGTYPE_p_TCODColor);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (uint8)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_b_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  uint8 result;
  
  SWIG_check_num_args("b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("b",1,"TCODColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_b_get",1,SWIGTYPE_p_TCODColor);
  }
  
  result = (uint8) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODColor__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor",0,0)
  result = (TCODColor *)new TCODColor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODColor__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("TCODColor",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("TCODColor",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODColor",3,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (TCODColor *)new TCODColor(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_TCODColor(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_TCODColor__SWIG_0(L);
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_TCODColor__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_TCODColor'\n"
    "  Possible C/C++ prototypes are:\n"
    "    TCODColor()\n"
    "    TCODColor(int,int,int)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODColor___eq(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  TCODColor *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"TCODColor const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"TCODColor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor___eq",1,SWIGTYPE_p_TCODColor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor___eq",2,SWIGTYPE_p_TCODColor);
  }
  
  result = (bool)((TCODColor const *)arg1)->operator ==((TCODColor const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  TCODColor *arg2 = 0 ;
  TCODColor result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"TCODColor const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"TCODColor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor___mul",1,SWIGTYPE_p_TCODColor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor___mul",2,SWIGTYPE_p_TCODColor);
  }
  
  result = ((TCODColor const *)arg1)->operator *((TCODColor const &)*arg2);
  {
    TCODColor * resultptr = new TCODColor((const TCODColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCODColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  float arg2 ;
  TCODColor result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"TCODColor const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor___mul",1,SWIGTYPE_p_TCODColor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = ((TCODColor const *)arg1)->operator *(arg2);
  {
    TCODColor * resultptr = new TCODColor((const TCODColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCODColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_TCODColor, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TCODColor___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_TCODColor, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TCODColor___mul__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'TCODColor___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(TCODColor const *,TCODColor const &)\n"
    "    operator *(TCODColor const *,float)\n");
  lua_error(L);return 0;
}


static int _wrap_TCODColor___add(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  TCODColor *arg2 = 0 ;
  TCODColor result;
  
  SWIG_check_num_args("operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator +",1,"TCODColor const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator +",2,"TCODColor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor___add",1,SWIGTYPE_p_TCODColor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor___add",2,SWIGTYPE_p_TCODColor);
  }
  
  result = ((TCODColor const *)arg1)->operator +((TCODColor const &)*arg2);
  {
    TCODColor * resultptr = new TCODColor((const TCODColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCODColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor___sub(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  TCODColor *arg2 = 0 ;
  TCODColor result;
  
  SWIG_check_num_args("operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator -",1,"TCODColor const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator -",2,"TCODColor const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor___sub",1,SWIGTYPE_p_TCODColor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor___sub",2,SWIGTYPE_p_TCODColor);
  }
  
  result = ((TCODColor const *)arg1)->operator -((TCODColor const &)*arg2);
  {
    TCODColor * resultptr = new TCODColor((const TCODColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCODColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lerp(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = 0 ;
  TCODColor *arg2 = 0 ;
  float arg3 ;
  TCODColor result;
  
  SWIG_check_num_args("TCODColor::lerp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("TCODColor::lerp",1,"TCODColor const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("TCODColor::lerp",2,"TCODColor const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("TCODColor::lerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_lerp",1,SWIGTYPE_p_TCODColor);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_lerp",2,SWIGTYPE_p_TCODColor);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = TCODColor::lerp((TCODColor const &)*arg1,(TCODColor const &)*arg2,arg3);
  {
    TCODColor * resultptr = new TCODColor((const TCODColor &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_TCODColor,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_setHSV(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("setHSV",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setHSV",1,"TCODColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setHSV",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setHSV",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("setHSV",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_setHSV",1,SWIGTYPE_p_TCODColor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->setHSV(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_setHue(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setHue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setHue",1,"TCODColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setHue",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_setHue",1,SWIGTYPE_p_TCODColor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setHue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_setSaturation(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setSaturation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSaturation",1,"TCODColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setSaturation",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_setSaturation",1,SWIGTYPE_p_TCODColor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setSaturation(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_setValue(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setValue",1,"TCODColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setValue",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_setValue",1,SWIGTYPE_p_TCODColor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setValue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_getHSV(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float temp2 ;
  float temp3 ;
  float temp4 ;
  
  arg2 = &temp2; 
  arg3 = &temp3; 
  arg4 = &temp4; 
  SWIG_check_num_args("getHSV",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getHSV",1,"TCODColor const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_getHSV",1,SWIGTYPE_p_TCODColor);
  }
  
  ((TCODColor const *)arg1)->getHSV(arg2,arg3,arg4);
  
  lua_pushnumber(L, (lua_Number) *arg2); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg3); SWIG_arg++;
  lua_pushnumber(L, (lua_Number) *arg4); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_getHue(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  float result;
  
  SWIG_check_num_args("getHue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getHue",1,"TCODColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_getHue",1,SWIGTYPE_p_TCODColor);
  }
  
  result = (float)(arg1)->getHue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_getSaturation(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  float result;
  
  SWIG_check_num_args("getSaturation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSaturation",1,"TCODColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_getSaturation",1,SWIGTYPE_p_TCODColor);
  }
  
  result = (float)(arg1)->getSaturation();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_getValue(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  float result;
  
  SWIG_check_num_args("getValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getValue",1,"TCODColor *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_getValue",1,SWIGTYPE_p_TCODColor);
  }
  
  result = (float)(arg1)->getValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_shiftHue(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("shiftHue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shiftHue",1,"TCODColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("shiftHue",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_shiftHue",1,SWIGTYPE_p_TCODColor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->shiftHue(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_scaleHSV(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *arg1 = (TCODColor *) 0 ;
  float arg2 ;
  float arg3 ;
  
  SWIG_check_num_args("scaleHSV",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("scaleHSV",1,"TCODColor *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("scaleHSV",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("scaleHSV",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_TCODColor,0))){
    SWIG_fail_ptr("TCODColor_scaleHSV",1,SWIGTYPE_p_TCODColor);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->scaleHSV(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_black_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::black",0,0)
  result = (TCODColor *)&TCODColor::black;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestGrey_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestGrey",0,0)
  result = (TCODColor *)&TCODColor::darkestGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerGrey_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerGrey",0,0)
  result = (TCODColor *)&TCODColor::darkerGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkGrey_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkGrey",0,0)
  result = (TCODColor *)&TCODColor::darkGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_grey_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::grey",0,0)
  result = (TCODColor *)&TCODColor::grey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightGrey_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightGrey",0,0)
  result = (TCODColor *)&TCODColor::lightGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterGrey_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterGrey",0,0)
  result = (TCODColor *)&TCODColor::lighterGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestGrey_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestGrey",0,0)
  result = (TCODColor *)&TCODColor::lightestGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_white_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::white",0,0)
  result = (TCODColor *)&TCODColor::white;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestSepia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestSepia",0,0)
  result = (TCODColor *)&TCODColor::darkestSepia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerSepia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerSepia",0,0)
  result = (TCODColor *)&TCODColor::darkerSepia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkSepia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkSepia",0,0)
  result = (TCODColor *)&TCODColor::darkSepia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_sepia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::sepia",0,0)
  result = (TCODColor *)&TCODColor::sepia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightSepia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightSepia",0,0)
  result = (TCODColor *)&TCODColor::lightSepia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterSepia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterSepia",0,0)
  result = (TCODColor *)&TCODColor::lighterSepia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestSepia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestSepia",0,0)
  result = (TCODColor *)&TCODColor::lightestSepia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_red_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::red",0,0)
  result = (TCODColor *)&TCODColor::red;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_flame_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::flame",0,0)
  result = (TCODColor *)&TCODColor::flame;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_orange_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::orange",0,0)
  result = (TCODColor *)&TCODColor::orange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_amber_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::amber",0,0)
  result = (TCODColor *)&TCODColor::amber;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_yellow_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::yellow",0,0)
  result = (TCODColor *)&TCODColor::yellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lime_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lime",0,0)
  result = (TCODColor *)&TCODColor::lime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_chartreuse_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::chartreuse",0,0)
  result = (TCODColor *)&TCODColor::chartreuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_green_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::green",0,0)
  result = (TCODColor *)&TCODColor::green;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_sea_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::sea",0,0)
  result = (TCODColor *)&TCODColor::sea;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_turquoise_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::turquoise",0,0)
  result = (TCODColor *)&TCODColor::turquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_cyan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::cyan",0,0)
  result = (TCODColor *)&TCODColor::cyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_sky_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::sky",0,0)
  result = (TCODColor *)&TCODColor::sky;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_azure_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::azure",0,0)
  result = (TCODColor *)&TCODColor::azure;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_blue_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::blue",0,0)
  result = (TCODColor *)&TCODColor::blue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_han_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::han",0,0)
  result = (TCODColor *)&TCODColor::han;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_violet_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::violet",0,0)
  result = (TCODColor *)&TCODColor::violet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_purple_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::purple",0,0)
  result = (TCODColor *)&TCODColor::purple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_fuchsia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::fuchsia",0,0)
  result = (TCODColor *)&TCODColor::fuchsia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_magenta_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::magenta",0,0)
  result = (TCODColor *)&TCODColor::magenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_pink_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::pink",0,0)
  result = (TCODColor *)&TCODColor::pink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_crimson_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::crimson",0,0)
  result = (TCODColor *)&TCODColor::crimson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkRed_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkRed",0,0)
  result = (TCODColor *)&TCODColor::darkRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkFlame_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkFlame",0,0)
  result = (TCODColor *)&TCODColor::darkFlame;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkOrange_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkOrange",0,0)
  result = (TCODColor *)&TCODColor::darkOrange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkAmber_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkAmber",0,0)
  result = (TCODColor *)&TCODColor::darkAmber;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkYellow_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkYellow",0,0)
  result = (TCODColor *)&TCODColor::darkYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkLime_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkLime",0,0)
  result = (TCODColor *)&TCODColor::darkLime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkChartreuse_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkChartreuse",0,0)
  result = (TCODColor *)&TCODColor::darkChartreuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkGreen_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkGreen",0,0)
  result = (TCODColor *)&TCODColor::darkGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkSea_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkSea",0,0)
  result = (TCODColor *)&TCODColor::darkSea;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkTurquoise_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkTurquoise",0,0)
  result = (TCODColor *)&TCODColor::darkTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkCyan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkCyan",0,0)
  result = (TCODColor *)&TCODColor::darkCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkSky_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkSky",0,0)
  result = (TCODColor *)&TCODColor::darkSky;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkAzure_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkAzure",0,0)
  result = (TCODColor *)&TCODColor::darkAzure;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkBlue_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkBlue",0,0)
  result = (TCODColor *)&TCODColor::darkBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkHan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkHan",0,0)
  result = (TCODColor *)&TCODColor::darkHan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkViolet_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkViolet",0,0)
  result = (TCODColor *)&TCODColor::darkViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkPurple_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkPurple",0,0)
  result = (TCODColor *)&TCODColor::darkPurple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkFuchsia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkFuchsia",0,0)
  result = (TCODColor *)&TCODColor::darkFuchsia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkMagenta_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkMagenta",0,0)
  result = (TCODColor *)&TCODColor::darkMagenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkPink_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkPink",0,0)
  result = (TCODColor *)&TCODColor::darkPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkCrimson_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkCrimson",0,0)
  result = (TCODColor *)&TCODColor::darkCrimson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerRed_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerRed",0,0)
  result = (TCODColor *)&TCODColor::darkerRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerFlame_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerFlame",0,0)
  result = (TCODColor *)&TCODColor::darkerFlame;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerOrange_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerOrange",0,0)
  result = (TCODColor *)&TCODColor::darkerOrange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerAmber_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerAmber",0,0)
  result = (TCODColor *)&TCODColor::darkerAmber;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerYellow_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerYellow",0,0)
  result = (TCODColor *)&TCODColor::darkerYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerLime_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerLime",0,0)
  result = (TCODColor *)&TCODColor::darkerLime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerChartreuse_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerChartreuse",0,0)
  result = (TCODColor *)&TCODColor::darkerChartreuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerGreen_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerGreen",0,0)
  result = (TCODColor *)&TCODColor::darkerGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerSea_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerSea",0,0)
  result = (TCODColor *)&TCODColor::darkerSea;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerTurquoise_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerTurquoise",0,0)
  result = (TCODColor *)&TCODColor::darkerTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerCyan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerCyan",0,0)
  result = (TCODColor *)&TCODColor::darkerCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerSky_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerSky",0,0)
  result = (TCODColor *)&TCODColor::darkerSky;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerAzure_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerAzure",0,0)
  result = (TCODColor *)&TCODColor::darkerAzure;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerBlue_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerBlue",0,0)
  result = (TCODColor *)&TCODColor::darkerBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerHan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerHan",0,0)
  result = (TCODColor *)&TCODColor::darkerHan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerViolet_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerViolet",0,0)
  result = (TCODColor *)&TCODColor::darkerViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerPurple_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerPurple",0,0)
  result = (TCODColor *)&TCODColor::darkerPurple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerFuchsia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerFuchsia",0,0)
  result = (TCODColor *)&TCODColor::darkerFuchsia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerMagenta_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerMagenta",0,0)
  result = (TCODColor *)&TCODColor::darkerMagenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerPink_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerPink",0,0)
  result = (TCODColor *)&TCODColor::darkerPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkerCrimson_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkerCrimson",0,0)
  result = (TCODColor *)&TCODColor::darkerCrimson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestRed_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestRed",0,0)
  result = (TCODColor *)&TCODColor::darkestRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestFlame_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestFlame",0,0)
  result = (TCODColor *)&TCODColor::darkestFlame;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestOrange_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestOrange",0,0)
  result = (TCODColor *)&TCODColor::darkestOrange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestAmber_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestAmber",0,0)
  result = (TCODColor *)&TCODColor::darkestAmber;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestYellow_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestYellow",0,0)
  result = (TCODColor *)&TCODColor::darkestYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestLime_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestLime",0,0)
  result = (TCODColor *)&TCODColor::darkestLime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestChartreuse_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestChartreuse",0,0)
  result = (TCODColor *)&TCODColor::darkestChartreuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestGreen_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestGreen",0,0)
  result = (TCODColor *)&TCODColor::darkestGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestSea_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestSea",0,0)
  result = (TCODColor *)&TCODColor::darkestSea;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestTurquoise_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestTurquoise",0,0)
  result = (TCODColor *)&TCODColor::darkestTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestCyan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestCyan",0,0)
  result = (TCODColor *)&TCODColor::darkestCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestSky_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestSky",0,0)
  result = (TCODColor *)&TCODColor::darkestSky;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestAzure_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestAzure",0,0)
  result = (TCODColor *)&TCODColor::darkestAzure;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestBlue_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestBlue",0,0)
  result = (TCODColor *)&TCODColor::darkestBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestHan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestHan",0,0)
  result = (TCODColor *)&TCODColor::darkestHan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestViolet_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestViolet",0,0)
  result = (TCODColor *)&TCODColor::darkestViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestPurple_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestPurple",0,0)
  result = (TCODColor *)&TCODColor::darkestPurple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestFuchsia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestFuchsia",0,0)
  result = (TCODColor *)&TCODColor::darkestFuchsia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestMagenta_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestMagenta",0,0)
  result = (TCODColor *)&TCODColor::darkestMagenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestPink_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestPink",0,0)
  result = (TCODColor *)&TCODColor::darkestPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_darkestCrimson_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::darkestCrimson",0,0)
  result = (TCODColor *)&TCODColor::darkestCrimson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightRed_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightRed",0,0)
  result = (TCODColor *)&TCODColor::lightRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightFlame_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightFlame",0,0)
  result = (TCODColor *)&TCODColor::lightFlame;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightOrange_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightOrange",0,0)
  result = (TCODColor *)&TCODColor::lightOrange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightAmber_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightAmber",0,0)
  result = (TCODColor *)&TCODColor::lightAmber;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightYellow_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightYellow",0,0)
  result = (TCODColor *)&TCODColor::lightYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightLime_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightLime",0,0)
  result = (TCODColor *)&TCODColor::lightLime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightChartreuse_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightChartreuse",0,0)
  result = (TCODColor *)&TCODColor::lightChartreuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightGreen_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightGreen",0,0)
  result = (TCODColor *)&TCODColor::lightGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightSea_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightSea",0,0)
  result = (TCODColor *)&TCODColor::lightSea;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightTurquoise_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightTurquoise",0,0)
  result = (TCODColor *)&TCODColor::lightTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightCyan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightCyan",0,0)
  result = (TCODColor *)&TCODColor::lightCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightSky_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightSky",0,0)
  result = (TCODColor *)&TCODColor::lightSky;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightAzure_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightAzure",0,0)
  result = (TCODColor *)&TCODColor::lightAzure;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightBlue_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightBlue",0,0)
  result = (TCODColor *)&TCODColor::lightBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightHan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightHan",0,0)
  result = (TCODColor *)&TCODColor::lightHan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightViolet_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightViolet",0,0)
  result = (TCODColor *)&TCODColor::lightViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightPurple_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightPurple",0,0)
  result = (TCODColor *)&TCODColor::lightPurple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightFuchsia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightFuchsia",0,0)
  result = (TCODColor *)&TCODColor::lightFuchsia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightMagenta_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightMagenta",0,0)
  result = (TCODColor *)&TCODColor::lightMagenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightPink_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightPink",0,0)
  result = (TCODColor *)&TCODColor::lightPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightCrimson_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightCrimson",0,0)
  result = (TCODColor *)&TCODColor::lightCrimson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterRed_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterRed",0,0)
  result = (TCODColor *)&TCODColor::lighterRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterFlame_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterFlame",0,0)
  result = (TCODColor *)&TCODColor::lighterFlame;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterOrange_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterOrange",0,0)
  result = (TCODColor *)&TCODColor::lighterOrange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterAmber_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterAmber",0,0)
  result = (TCODColor *)&TCODColor::lighterAmber;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterYellow_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterYellow",0,0)
  result = (TCODColor *)&TCODColor::lighterYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterLime_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterLime",0,0)
  result = (TCODColor *)&TCODColor::lighterLime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterChartreuse_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterChartreuse",0,0)
  result = (TCODColor *)&TCODColor::lighterChartreuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterGreen_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterGreen",0,0)
  result = (TCODColor *)&TCODColor::lighterGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterSea_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterSea",0,0)
  result = (TCODColor *)&TCODColor::lighterSea;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterTurquoise_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterTurquoise",0,0)
  result = (TCODColor *)&TCODColor::lighterTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterCyan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterCyan",0,0)
  result = (TCODColor *)&TCODColor::lighterCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterSky_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterSky",0,0)
  result = (TCODColor *)&TCODColor::lighterSky;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterAzure_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterAzure",0,0)
  result = (TCODColor *)&TCODColor::lighterAzure;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterBlue_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterBlue",0,0)
  result = (TCODColor *)&TCODColor::lighterBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterHan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterHan",0,0)
  result = (TCODColor *)&TCODColor::lighterHan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterViolet_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterViolet",0,0)
  result = (TCODColor *)&TCODColor::lighterViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterPurple_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterPurple",0,0)
  result = (TCODColor *)&TCODColor::lighterPurple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterFuchsia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterFuchsia",0,0)
  result = (TCODColor *)&TCODColor::lighterFuchsia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterMagenta_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterMagenta",0,0)
  result = (TCODColor *)&TCODColor::lighterMagenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterPink_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterPink",0,0)
  result = (TCODColor *)&TCODColor::lighterPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lighterCrimson_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lighterCrimson",0,0)
  result = (TCODColor *)&TCODColor::lighterCrimson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestRed_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestRed",0,0)
  result = (TCODColor *)&TCODColor::lightestRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestFlame_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestFlame",0,0)
  result = (TCODColor *)&TCODColor::lightestFlame;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestOrange_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestOrange",0,0)
  result = (TCODColor *)&TCODColor::lightestOrange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestAmber_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestAmber",0,0)
  result = (TCODColor *)&TCODColor::lightestAmber;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestYellow_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestYellow",0,0)
  result = (TCODColor *)&TCODColor::lightestYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestLime_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestLime",0,0)
  result = (TCODColor *)&TCODColor::lightestLime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestChartreuse_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestChartreuse",0,0)
  result = (TCODColor *)&TCODColor::lightestChartreuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestGreen_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestGreen",0,0)
  result = (TCODColor *)&TCODColor::lightestGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestSea_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestSea",0,0)
  result = (TCODColor *)&TCODColor::lightestSea;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestTurquoise_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestTurquoise",0,0)
  result = (TCODColor *)&TCODColor::lightestTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestCyan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestCyan",0,0)
  result = (TCODColor *)&TCODColor::lightestCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestSky_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestSky",0,0)
  result = (TCODColor *)&TCODColor::lightestSky;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestAzure_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestAzure",0,0)
  result = (TCODColor *)&TCODColor::lightestAzure;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestBlue_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestBlue",0,0)
  result = (TCODColor *)&TCODColor::lightestBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestHan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestHan",0,0)
  result = (TCODColor *)&TCODColor::lightestHan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestViolet_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestViolet",0,0)
  result = (TCODColor *)&TCODColor::lightestViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestPurple_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestPurple",0,0)
  result = (TCODColor *)&TCODColor::lightestPurple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestFuchsia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestFuchsia",0,0)
  result = (TCODColor *)&TCODColor::lightestFuchsia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestMagenta_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestMagenta",0,0)
  result = (TCODColor *)&TCODColor::lightestMagenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestPink_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestPink",0,0)
  result = (TCODColor *)&TCODColor::lightestPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_lightestCrimson_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::lightestCrimson",0,0)
  result = (TCODColor *)&TCODColor::lightestCrimson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedRed_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedRed",0,0)
  result = (TCODColor *)&TCODColor::desaturatedRed;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedFlame_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedFlame",0,0)
  result = (TCODColor *)&TCODColor::desaturatedFlame;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedOrange_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedOrange",0,0)
  result = (TCODColor *)&TCODColor::desaturatedOrange;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedAmber_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedAmber",0,0)
  result = (TCODColor *)&TCODColor::desaturatedAmber;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedYellow_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedYellow",0,0)
  result = (TCODColor *)&TCODColor::desaturatedYellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedLime_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedLime",0,0)
  result = (TCODColor *)&TCODColor::desaturatedLime;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedChartreuse_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedChartreuse",0,0)
  result = (TCODColor *)&TCODColor::desaturatedChartreuse;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedGreen_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedGreen",0,0)
  result = (TCODColor *)&TCODColor::desaturatedGreen;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedSea_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedSea",0,0)
  result = (TCODColor *)&TCODColor::desaturatedSea;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedTurquoise_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedTurquoise",0,0)
  result = (TCODColor *)&TCODColor::desaturatedTurquoise;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedCyan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedCyan",0,0)
  result = (TCODColor *)&TCODColor::desaturatedCyan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedSky_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedSky",0,0)
  result = (TCODColor *)&TCODColor::desaturatedSky;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedAzure_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedAzure",0,0)
  result = (TCODColor *)&TCODColor::desaturatedAzure;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedBlue_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedBlue",0,0)
  result = (TCODColor *)&TCODColor::desaturatedBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedHan_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedHan",0,0)
  result = (TCODColor *)&TCODColor::desaturatedHan;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedViolet_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedViolet",0,0)
  result = (TCODColor *)&TCODColor::desaturatedViolet;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedPurple_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedPurple",0,0)
  result = (TCODColor *)&TCODColor::desaturatedPurple;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedFuchsia_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedFuchsia",0,0)
  result = (TCODColor *)&TCODColor::desaturatedFuchsia;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedMagenta_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedMagenta",0,0)
  result = (TCODColor *)&TCODColor::desaturatedMagenta;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedPink_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedPink",0,0)
  result = (TCODColor *)&TCODColor::desaturatedPink;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_desaturatedCrimson_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::desaturatedCrimson",0,0)
  result = (TCODColor *)&TCODColor::desaturatedCrimson;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_brass_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::brass",0,0)
  result = (TCODColor *)&TCODColor::brass;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_copper_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::copper",0,0)
  result = (TCODColor *)&TCODColor::copper;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_gold_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::gold",0,0)
  result = (TCODColor *)&TCODColor::gold;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_silver_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::silver",0,0)
  result = (TCODColor *)&TCODColor::silver;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_celadon_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::celadon",0,0)
  result = (TCODColor *)&TCODColor::celadon;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TCODColor_peach_get(lua_State* L) {
  int SWIG_arg = 0;
  TCODColor *result = 0 ;
  
  SWIG_check_num_args("TCODColor::peach",0,0)
  result = (TCODColor *)&TCODColor::peach;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_TCODColor,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TCODColor(void *obj) {
TCODColor *arg1 = (TCODColor *) obj;
delete arg1;
}
static swig_lua_method swig_TCODColor_methods[] = {
    {"__eq", _wrap_TCODColor___eq}, 
    {"__mul", _wrap_TCODColor___mul}, 
    {"__add", _wrap_TCODColor___add}, 
    {"__sub", _wrap_TCODColor___sub}, 
    {"setHSV", _wrap_TCODColor_setHSV}, 
    {"setHue", _wrap_TCODColor_setHue}, 
    {"setSaturation", _wrap_TCODColor_setSaturation}, 
    {"setValue", _wrap_TCODColor_setValue}, 
    {"getHSV", _wrap_TCODColor_getHSV}, 
    {"getHue", _wrap_TCODColor_getHue}, 
    {"getSaturation", _wrap_TCODColor_getSaturation}, 
    {"getValue", _wrap_TCODColor_getValue}, 
    {"shiftHue", _wrap_TCODColor_shiftHue}, 
    {"scaleHSV", _wrap_TCODColor_scaleHSV}, 
    {0,0}
};
static swig_lua_attribute swig_TCODColor_attributes[] = {
    { "r", _wrap_TCODColor_r_get, _wrap_TCODColor_r_set},
    { "g", _wrap_TCODColor_g_get, _wrap_TCODColor_g_set},
    { "b", _wrap_TCODColor_b_get, _wrap_TCODColor_b_set},
    {0,0,0}
};
static swig_lua_class *swig_TCODColor_bases[] = {0};
static const char *swig_TCODColor_base_names[] = {0};
static swig_lua_class _wrap_class_TCODColor = { "TCODColor", &SWIGTYPE_p_TCODColor,_wrap_new_TCODColor, swig_delete_TCODColor, swig_TCODColor_methods, swig_TCODColor_attributes, swig_TCODColor_bases, swig_TCODColor_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "TCODNameGenerator_parse",_wrap_TCODNameGenerator_parse},
    { "TCODNameGenerator_generate",_wrap_TCODNameGenerator_generate},
    { "TCODNameGenerator_generateCustom",_wrap_TCODNameGenerator_generateCustom},
    { "TCODNameGenerator_getSets", _wrap_TCODNameGenerator_getSets},
    { "TCODNameGenerator_destroy", _wrap_TCODNameGenerator_destroy},
    { "TCODBackgroundAlphaMask", _wrap_TCODBackgroundAlphaMask},
    { "TCODLine_init", _wrap_TCODLine_init},
    { "TCODLine_step", _wrap_TCODLine_step},
    { "TCODLine_line", _wrap_TCODLine_line},
    { "TCODConsole_initRoot",_wrap_TCODConsole_initRoot},
    { "TCODConsole_setCustomFont",_wrap_TCODConsole_setCustomFont},
    { "TCODConsole_mapAsciiCodeToFont", _wrap_TCODConsole_mapAsciiCodeToFont},
    { "TCODConsole_mapAsciiCodesToFont", _wrap_TCODConsole_mapAsciiCodesToFont},
    { "TCODConsole_mapStringToFont", _wrap_TCODConsole_mapStringToFont},
    { "TCODConsole_isFullscreen", _wrap_TCODConsole_isFullscreen},
    { "TCODConsole_setFullscreen", _wrap_TCODConsole_setFullscreen},
    { "TCODConsole_setWindowTitle", _wrap_TCODConsole_setWindowTitle},
    { "TCODConsole_isWindowClosed", _wrap_TCODConsole_isWindowClosed},
    { "TCODConsole_credits", _wrap_TCODConsole_credits},
    { "TCODConsole_renderCredits", _wrap_TCODConsole_renderCredits},
    { "TCODConsole_resetCredits", _wrap_TCODConsole_resetCredits},
    { "TCODConsole_setFade", _wrap_TCODConsole_setFade},
    { "TCODConsole_getFade", _wrap_TCODConsole_getFade},
    { "TCODConsole_getFadingColor", _wrap_TCODConsole_getFadingColor},
    { "TCODConsole_flush", _wrap_TCODConsole_flush},
    { "TCODConsole_waitForKeypress", _wrap_TCODConsole_waitForKeypress},
    { "TCODConsole_checkForKeypress",_wrap_TCODConsole_checkForKeypress},
    { "TCODConsole_isKeyPressed", _wrap_TCODConsole_isKeyPressed},
    { "TCODConsole_setKeyboardRepeat", _wrap_TCODConsole_setKeyboardRepeat},
    { "TCODConsole_disableKeyboardRepeat", _wrap_TCODConsole_disableKeyboardRepeat},
    { "TCODConsole_blit",_wrap_TCODConsole_blit},
    { "TCODConsole_getColorControlString", _wrap_TCODConsole_getColorControlString},
    { "TCODConsole_getRGBColorControlString", _wrap_TCODConsole_getRGBColorControlString},
    { "TCODRandom_getInstance", _wrap_TCODRandom_getInstance},
    { "TCODMouse_showCursor", _wrap_TCODMouse_showCursor},
    { "TCODMouse_isCursorVisible", _wrap_TCODMouse_isCursorVisible},
    { "TCODMouse_moveMouse", _wrap_TCODMouse_moveMouse},
    { "TCODMouse_getStatus", _wrap_TCODMouse_getStatus},
    { "TCODSystem_setFps", _wrap_TCODSystem_setFps},
    { "TCODSystem_getFps", _wrap_TCODSystem_getFps},
    { "TCODSystem_getLastFrameLength", _wrap_TCODSystem_getLastFrameLength},
    { "TCODSystem_sleepMilli", _wrap_TCODSystem_sleepMilli},
    { "TCODSystem_getElapsedMilli", _wrap_TCODSystem_getElapsedMilli},
    { "TCODSystem_getElapsedSeconds", _wrap_TCODSystem_getElapsedSeconds},
    { "TCODSystem_saveScreenshot", _wrap_TCODSystem_saveScreenshot},
    { "TCODSystem_fileExists", _wrap_TCODSystem_fileExists},
    { "TCODSystem_forceFullscreenResolution", _wrap_TCODSystem_forceFullscreenResolution},
    { "TCODSystem_getCurrentResolution", _wrap_TCODSystem_getCurrentResolution},
    { "TCODSystem_getFullscreenOffsets", _wrap_TCODSystem_getFullscreenOffsets},
    { "TCODSystem_getCharSize", _wrap_TCODSystem_getCharSize},
    { "TCODSystem_setRenderer", _wrap_TCODSystem_setRenderer},
    { "TCODSystem_getRenderer", _wrap_TCODSystem_getRenderer},
    { "TCODCBackgroundHelpers_CreateAddAlphaBackground", _wrap_TCODCBackgroundHelpers_CreateAddAlphaBackground},
    { "TCODCBackgroundHelpers_CreateAlphaBackground", _wrap_TCODCBackgroundHelpers_CreateAlphaBackground},
    { "TCODColor_lerp", _wrap_TCODColor_lerp},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "TCODConsole_root", _wrap_TCODConsole_root_get, _wrap_TCODConsole_root_set },
    { "TCODColor_black", _wrap_TCODColor_black_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestGrey", _wrap_TCODColor_darkestGrey_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerGrey", _wrap_TCODColor_darkerGrey_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkGrey", _wrap_TCODColor_darkGrey_get, SWIG_Lua_set_immutable },
    { "TCODColor_grey", _wrap_TCODColor_grey_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightGrey", _wrap_TCODColor_lightGrey_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterGrey", _wrap_TCODColor_lighterGrey_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestGrey", _wrap_TCODColor_lightestGrey_get, SWIG_Lua_set_immutable },
    { "TCODColor_white", _wrap_TCODColor_white_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestSepia", _wrap_TCODColor_darkestSepia_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerSepia", _wrap_TCODColor_darkerSepia_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkSepia", _wrap_TCODColor_darkSepia_get, SWIG_Lua_set_immutable },
    { "TCODColor_sepia", _wrap_TCODColor_sepia_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightSepia", _wrap_TCODColor_lightSepia_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterSepia", _wrap_TCODColor_lighterSepia_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestSepia", _wrap_TCODColor_lightestSepia_get, SWIG_Lua_set_immutable },
    { "TCODColor_red", _wrap_TCODColor_red_get, SWIG_Lua_set_immutable },
    { "TCODColor_flame", _wrap_TCODColor_flame_get, SWIG_Lua_set_immutable },
    { "TCODColor_orange", _wrap_TCODColor_orange_get, SWIG_Lua_set_immutable },
    { "TCODColor_amber", _wrap_TCODColor_amber_get, SWIG_Lua_set_immutable },
    { "TCODColor_yellow", _wrap_TCODColor_yellow_get, SWIG_Lua_set_immutable },
    { "TCODColor_lime", _wrap_TCODColor_lime_get, SWIG_Lua_set_immutable },
    { "TCODColor_chartreuse", _wrap_TCODColor_chartreuse_get, SWIG_Lua_set_immutable },
    { "TCODColor_green", _wrap_TCODColor_green_get, SWIG_Lua_set_immutable },
    { "TCODColor_sea", _wrap_TCODColor_sea_get, SWIG_Lua_set_immutable },
    { "TCODColor_turquoise", _wrap_TCODColor_turquoise_get, SWIG_Lua_set_immutable },
    { "TCODColor_cyan", _wrap_TCODColor_cyan_get, SWIG_Lua_set_immutable },
    { "TCODColor_sky", _wrap_TCODColor_sky_get, SWIG_Lua_set_immutable },
    { "TCODColor_azure", _wrap_TCODColor_azure_get, SWIG_Lua_set_immutable },
    { "TCODColor_blue", _wrap_TCODColor_blue_get, SWIG_Lua_set_immutable },
    { "TCODColor_han", _wrap_TCODColor_han_get, SWIG_Lua_set_immutable },
    { "TCODColor_violet", _wrap_TCODColor_violet_get, SWIG_Lua_set_immutable },
    { "TCODColor_purple", _wrap_TCODColor_purple_get, SWIG_Lua_set_immutable },
    { "TCODColor_fuchsia", _wrap_TCODColor_fuchsia_get, SWIG_Lua_set_immutable },
    { "TCODColor_magenta", _wrap_TCODColor_magenta_get, SWIG_Lua_set_immutable },
    { "TCODColor_pink", _wrap_TCODColor_pink_get, SWIG_Lua_set_immutable },
    { "TCODColor_crimson", _wrap_TCODColor_crimson_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkRed", _wrap_TCODColor_darkRed_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkFlame", _wrap_TCODColor_darkFlame_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkOrange", _wrap_TCODColor_darkOrange_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkAmber", _wrap_TCODColor_darkAmber_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkYellow", _wrap_TCODColor_darkYellow_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkLime", _wrap_TCODColor_darkLime_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkChartreuse", _wrap_TCODColor_darkChartreuse_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkGreen", _wrap_TCODColor_darkGreen_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkSea", _wrap_TCODColor_darkSea_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkTurquoise", _wrap_TCODColor_darkTurquoise_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkCyan", _wrap_TCODColor_darkCyan_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkSky", _wrap_TCODColor_darkSky_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkAzure", _wrap_TCODColor_darkAzure_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkBlue", _wrap_TCODColor_darkBlue_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkHan", _wrap_TCODColor_darkHan_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkViolet", _wrap_TCODColor_darkViolet_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkPurple", _wrap_TCODColor_darkPurple_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkFuchsia", _wrap_TCODColor_darkFuchsia_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkMagenta", _wrap_TCODColor_darkMagenta_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkPink", _wrap_TCODColor_darkPink_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkCrimson", _wrap_TCODColor_darkCrimson_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerRed", _wrap_TCODColor_darkerRed_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerFlame", _wrap_TCODColor_darkerFlame_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerOrange", _wrap_TCODColor_darkerOrange_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerAmber", _wrap_TCODColor_darkerAmber_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerYellow", _wrap_TCODColor_darkerYellow_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerLime", _wrap_TCODColor_darkerLime_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerChartreuse", _wrap_TCODColor_darkerChartreuse_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerGreen", _wrap_TCODColor_darkerGreen_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerSea", _wrap_TCODColor_darkerSea_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerTurquoise", _wrap_TCODColor_darkerTurquoise_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerCyan", _wrap_TCODColor_darkerCyan_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerSky", _wrap_TCODColor_darkerSky_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerAzure", _wrap_TCODColor_darkerAzure_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerBlue", _wrap_TCODColor_darkerBlue_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerHan", _wrap_TCODColor_darkerHan_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerViolet", _wrap_TCODColor_darkerViolet_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerPurple", _wrap_TCODColor_darkerPurple_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerFuchsia", _wrap_TCODColor_darkerFuchsia_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerMagenta", _wrap_TCODColor_darkerMagenta_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerPink", _wrap_TCODColor_darkerPink_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkerCrimson", _wrap_TCODColor_darkerCrimson_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestRed", _wrap_TCODColor_darkestRed_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestFlame", _wrap_TCODColor_darkestFlame_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestOrange", _wrap_TCODColor_darkestOrange_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestAmber", _wrap_TCODColor_darkestAmber_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestYellow", _wrap_TCODColor_darkestYellow_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestLime", _wrap_TCODColor_darkestLime_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestChartreuse", _wrap_TCODColor_darkestChartreuse_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestGreen", _wrap_TCODColor_darkestGreen_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestSea", _wrap_TCODColor_darkestSea_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestTurquoise", _wrap_TCODColor_darkestTurquoise_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestCyan", _wrap_TCODColor_darkestCyan_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestSky", _wrap_TCODColor_darkestSky_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestAzure", _wrap_TCODColor_darkestAzure_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestBlue", _wrap_TCODColor_darkestBlue_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestHan", _wrap_TCODColor_darkestHan_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestViolet", _wrap_TCODColor_darkestViolet_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestPurple", _wrap_TCODColor_darkestPurple_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestFuchsia", _wrap_TCODColor_darkestFuchsia_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestMagenta", _wrap_TCODColor_darkestMagenta_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestPink", _wrap_TCODColor_darkestPink_get, SWIG_Lua_set_immutable },
    { "TCODColor_darkestCrimson", _wrap_TCODColor_darkestCrimson_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightRed", _wrap_TCODColor_lightRed_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightFlame", _wrap_TCODColor_lightFlame_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightOrange", _wrap_TCODColor_lightOrange_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightAmber", _wrap_TCODColor_lightAmber_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightYellow", _wrap_TCODColor_lightYellow_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightLime", _wrap_TCODColor_lightLime_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightChartreuse", _wrap_TCODColor_lightChartreuse_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightGreen", _wrap_TCODColor_lightGreen_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightSea", _wrap_TCODColor_lightSea_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightTurquoise", _wrap_TCODColor_lightTurquoise_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightCyan", _wrap_TCODColor_lightCyan_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightSky", _wrap_TCODColor_lightSky_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightAzure", _wrap_TCODColor_lightAzure_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightBlue", _wrap_TCODColor_lightBlue_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightHan", _wrap_TCODColor_lightHan_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightViolet", _wrap_TCODColor_lightViolet_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightPurple", _wrap_TCODColor_lightPurple_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightFuchsia", _wrap_TCODColor_lightFuchsia_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightMagenta", _wrap_TCODColor_lightMagenta_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightPink", _wrap_TCODColor_lightPink_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightCrimson", _wrap_TCODColor_lightCrimson_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterRed", _wrap_TCODColor_lighterRed_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterFlame", _wrap_TCODColor_lighterFlame_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterOrange", _wrap_TCODColor_lighterOrange_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterAmber", _wrap_TCODColor_lighterAmber_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterYellow", _wrap_TCODColor_lighterYellow_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterLime", _wrap_TCODColor_lighterLime_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterChartreuse", _wrap_TCODColor_lighterChartreuse_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterGreen", _wrap_TCODColor_lighterGreen_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterSea", _wrap_TCODColor_lighterSea_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterTurquoise", _wrap_TCODColor_lighterTurquoise_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterCyan", _wrap_TCODColor_lighterCyan_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterSky", _wrap_TCODColor_lighterSky_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterAzure", _wrap_TCODColor_lighterAzure_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterBlue", _wrap_TCODColor_lighterBlue_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterHan", _wrap_TCODColor_lighterHan_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterViolet", _wrap_TCODColor_lighterViolet_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterPurple", _wrap_TCODColor_lighterPurple_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterFuchsia", _wrap_TCODColor_lighterFuchsia_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterMagenta", _wrap_TCODColor_lighterMagenta_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterPink", _wrap_TCODColor_lighterPink_get, SWIG_Lua_set_immutable },
    { "TCODColor_lighterCrimson", _wrap_TCODColor_lighterCrimson_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestRed", _wrap_TCODColor_lightestRed_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestFlame", _wrap_TCODColor_lightestFlame_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestOrange", _wrap_TCODColor_lightestOrange_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestAmber", _wrap_TCODColor_lightestAmber_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestYellow", _wrap_TCODColor_lightestYellow_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestLime", _wrap_TCODColor_lightestLime_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestChartreuse", _wrap_TCODColor_lightestChartreuse_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestGreen", _wrap_TCODColor_lightestGreen_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestSea", _wrap_TCODColor_lightestSea_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestTurquoise", _wrap_TCODColor_lightestTurquoise_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestCyan", _wrap_TCODColor_lightestCyan_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestSky", _wrap_TCODColor_lightestSky_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestAzure", _wrap_TCODColor_lightestAzure_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestBlue", _wrap_TCODColor_lightestBlue_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestHan", _wrap_TCODColor_lightestHan_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestViolet", _wrap_TCODColor_lightestViolet_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestPurple", _wrap_TCODColor_lightestPurple_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestFuchsia", _wrap_TCODColor_lightestFuchsia_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestMagenta", _wrap_TCODColor_lightestMagenta_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestPink", _wrap_TCODColor_lightestPink_get, SWIG_Lua_set_immutable },
    { "TCODColor_lightestCrimson", _wrap_TCODColor_lightestCrimson_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedRed", _wrap_TCODColor_desaturatedRed_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedFlame", _wrap_TCODColor_desaturatedFlame_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedOrange", _wrap_TCODColor_desaturatedOrange_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedAmber", _wrap_TCODColor_desaturatedAmber_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedYellow", _wrap_TCODColor_desaturatedYellow_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedLime", _wrap_TCODColor_desaturatedLime_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedChartreuse", _wrap_TCODColor_desaturatedChartreuse_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedGreen", _wrap_TCODColor_desaturatedGreen_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedSea", _wrap_TCODColor_desaturatedSea_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedTurquoise", _wrap_TCODColor_desaturatedTurquoise_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedCyan", _wrap_TCODColor_desaturatedCyan_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedSky", _wrap_TCODColor_desaturatedSky_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedAzure", _wrap_TCODColor_desaturatedAzure_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedBlue", _wrap_TCODColor_desaturatedBlue_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedHan", _wrap_TCODColor_desaturatedHan_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedViolet", _wrap_TCODColor_desaturatedViolet_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedPurple", _wrap_TCODColor_desaturatedPurple_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedFuchsia", _wrap_TCODColor_desaturatedFuchsia_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedMagenta", _wrap_TCODColor_desaturatedMagenta_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedPink", _wrap_TCODColor_desaturatedPink_get, SWIG_Lua_set_immutable },
    { "TCODColor_desaturatedCrimson", _wrap_TCODColor_desaturatedCrimson_get, SWIG_Lua_set_immutable },
    { "TCODColor_brass", _wrap_TCODColor_brass_get, SWIG_Lua_set_immutable },
    { "TCODColor_copper", _wrap_TCODColor_copper_get, SWIG_Lua_set_immutable },
    { "TCODColor_gold", _wrap_TCODColor_gold_get, SWIG_Lua_set_immutable },
    { "TCODColor_silver", _wrap_TCODColor_silver_get, SWIG_Lua_set_immutable },
    { "TCODColor_celadon", _wrap_TCODColor_celadon_get, SWIG_Lua_set_immutable },
    { "TCODColor_peach", _wrap_TCODColor_peach_get, SWIG_Lua_set_immutable },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"FOV_BASIC", (long) FOV_BASIC, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOV_DIAMOND", (long) FOV_DIAMOND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOV_SHADOW", (long) FOV_SHADOW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOV_PERMISSIVE_0", (long) FOV_PERMISSIVE_0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOV_PERMISSIVE_1", (long) FOV_PERMISSIVE_1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOV_PERMISSIVE_2", (long) FOV_PERMISSIVE_2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOV_PERMISSIVE_3", (long) FOV_PERMISSIVE_3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOV_PERMISSIVE_4", (long) FOV_PERMISSIVE_4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOV_PERMISSIVE_5", (long) FOV_PERMISSIVE_5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOV_PERMISSIVE_6", (long) FOV_PERMISSIVE_6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOV_PERMISSIVE_7", (long) FOV_PERMISSIVE_7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOV_PERMISSIVE_8", (long) FOV_PERMISSIVE_8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"FOV_RESTRICTIVE", (long) FOV_RESTRICTIVE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_RNG_MT", (long) TCOD_RNG_MT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_RNG_CMWC", (long) TCOD_RNG_CMWC, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_DISTRIBUTION_LINEAR", (long) TCOD_DISTRIBUTION_LINEAR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_DISTRIBUTION_GAUSSIAN", (long) TCOD_DISTRIBUTION_GAUSSIAN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_DISTRIBUTION_GAUSSIAN_RANGE", (long) TCOD_DISTRIBUTION_GAUSSIAN_RANGE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_DISTRIBUTION_GAUSSIAN_INVERSE", (long) TCOD_DISTRIBUTION_GAUSSIAN_INVERSE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_DISTRIBUTION_GAUSSIAN_RANGE_INVERSE", (long) TCOD_DISTRIBUTION_GAUSSIAN_RANGE_INVERSE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_NONE", (long) TCODK_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_ESCAPE", (long) TCODK_ESCAPE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_BACKSPACE", (long) TCODK_BACKSPACE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_TAB", (long) TCODK_TAB, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_ENTER", (long) TCODK_ENTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_SHIFT", (long) TCODK_SHIFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_CONTROL", (long) TCODK_CONTROL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_ALT", (long) TCODK_ALT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_PAUSE", (long) TCODK_PAUSE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_CAPSLOCK", (long) TCODK_CAPSLOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_PAGEUP", (long) TCODK_PAGEUP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_PAGEDOWN", (long) TCODK_PAGEDOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_END", (long) TCODK_END, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_HOME", (long) TCODK_HOME, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_UP", (long) TCODK_UP, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_LEFT", (long) TCODK_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_RIGHT", (long) TCODK_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_DOWN", (long) TCODK_DOWN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_PRINTSCREEN", (long) TCODK_PRINTSCREEN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_INSERT", (long) TCODK_INSERT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_DELETE", (long) TCODK_DELETE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_LWIN", (long) TCODK_LWIN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_RWIN", (long) TCODK_RWIN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_APPS", (long) TCODK_APPS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_0", (long) TCODK_0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_1", (long) TCODK_1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_2", (long) TCODK_2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_3", (long) TCODK_3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_4", (long) TCODK_4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_5", (long) TCODK_5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_6", (long) TCODK_6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_7", (long) TCODK_7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_8", (long) TCODK_8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_9", (long) TCODK_9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KP0", (long) TCODK_KP0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KP1", (long) TCODK_KP1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KP2", (long) TCODK_KP2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KP3", (long) TCODK_KP3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KP4", (long) TCODK_KP4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KP5", (long) TCODK_KP5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KP6", (long) TCODK_KP6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KP7", (long) TCODK_KP7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KP8", (long) TCODK_KP8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KP9", (long) TCODK_KP9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KPADD", (long) TCODK_KPADD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KPSUB", (long) TCODK_KPSUB, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KPDIV", (long) TCODK_KPDIV, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KPMUL", (long) TCODK_KPMUL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KPDEC", (long) TCODK_KPDEC, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_KPENTER", (long) TCODK_KPENTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_F1", (long) TCODK_F1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_F2", (long) TCODK_F2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_F3", (long) TCODK_F3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_F4", (long) TCODK_F4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_F5", (long) TCODK_F5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_F6", (long) TCODK_F6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_F7", (long) TCODK_F7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_F8", (long) TCODK_F8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_F9", (long) TCODK_F9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_F10", (long) TCODK_F10, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_F11", (long) TCODK_F11, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_F12", (long) TCODK_F12, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_NUMLOCK", (long) TCODK_NUMLOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_SCROLLLOCK", (long) TCODK_SCROLLLOCK, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_SPACE", (long) TCODK_SPACE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCODK_CHAR", (long) TCODK_CHAR, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_HLINE", (long) TCOD_CHAR_HLINE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_VLINE", (long) TCOD_CHAR_VLINE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_NE", (long) TCOD_CHAR_NE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_NW", (long) TCOD_CHAR_NW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SE", (long) TCOD_CHAR_SE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SW", (long) TCOD_CHAR_SW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_TEEW", (long) TCOD_CHAR_TEEW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_TEEE", (long) TCOD_CHAR_TEEE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_TEEN", (long) TCOD_CHAR_TEEN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_TEES", (long) TCOD_CHAR_TEES, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_CROSS", (long) TCOD_CHAR_CROSS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DHLINE", (long) TCOD_CHAR_DHLINE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DVLINE", (long) TCOD_CHAR_DVLINE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DNE", (long) TCOD_CHAR_DNE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DNW", (long) TCOD_CHAR_DNW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DSE", (long) TCOD_CHAR_DSE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DSW", (long) TCOD_CHAR_DSW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DTEEW", (long) TCOD_CHAR_DTEEW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DTEEE", (long) TCOD_CHAR_DTEEE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DTEEN", (long) TCOD_CHAR_DTEEN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DTEES", (long) TCOD_CHAR_DTEES, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DCROSS", (long) TCOD_CHAR_DCROSS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_BLOCK1", (long) TCOD_CHAR_BLOCK1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_BLOCK2", (long) TCOD_CHAR_BLOCK2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_BLOCK3", (long) TCOD_CHAR_BLOCK3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_ARROW_N", (long) TCOD_CHAR_ARROW_N, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_ARROW_S", (long) TCOD_CHAR_ARROW_S, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_ARROW_E", (long) TCOD_CHAR_ARROW_E, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_ARROW_W", (long) TCOD_CHAR_ARROW_W, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_ARROW2_N", (long) TCOD_CHAR_ARROW2_N, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_ARROW2_S", (long) TCOD_CHAR_ARROW2_S, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_ARROW2_E", (long) TCOD_CHAR_ARROW2_E, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_ARROW2_W", (long) TCOD_CHAR_ARROW2_W, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DARROW_H", (long) TCOD_CHAR_DARROW_H, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DARROW_V", (long) TCOD_CHAR_DARROW_V, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SUBP_NW", (long) TCOD_CHAR_SUBP_NW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SUBP_NE", (long) TCOD_CHAR_SUBP_NE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SUBP_N", (long) TCOD_CHAR_SUBP_N, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SUBP_SE", (long) TCOD_CHAR_SUBP_SE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SUBP_DIAG", (long) TCOD_CHAR_SUBP_DIAG, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SUBP_E", (long) TCOD_CHAR_SUBP_E, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SUBP_SW", (long) TCOD_CHAR_SUBP_SW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SMILIE", (long) TCOD_CHAR_SMILIE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SMILIE_INV", (long) TCOD_CHAR_SMILIE_INV, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_HEART", (long) TCOD_CHAR_HEART, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DIAMOND", (long) TCOD_CHAR_DIAMOND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_CLUB", (long) TCOD_CHAR_CLUB, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SPADE", (long) TCOD_CHAR_SPADE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_BULLET", (long) TCOD_CHAR_BULLET, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_BULLET_INV", (long) TCOD_CHAR_BULLET_INV, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_MALE", (long) TCOD_CHAR_MALE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_FEMALE", (long) TCOD_CHAR_FEMALE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_NOTE", (long) TCOD_CHAR_NOTE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_NOTE_DOUBLE", (long) TCOD_CHAR_NOTE_DOUBLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_LIGHT", (long) TCOD_CHAR_LIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_EXCLAM_DOUBLE", (long) TCOD_CHAR_EXCLAM_DOUBLE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_PILCROW", (long) TCOD_CHAR_PILCROW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_SECTION", (long) TCOD_CHAR_SECTION, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_POUND", (long) TCOD_CHAR_POUND, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_MULTIPLICATION", (long) TCOD_CHAR_MULTIPLICATION, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_FUNCTION", (long) TCOD_CHAR_FUNCTION, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_RESERVED", (long) TCOD_CHAR_RESERVED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_HALF", (long) TCOD_CHAR_HALF, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_ONE_QUARTER", (long) TCOD_CHAR_ONE_QUARTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_COPYRIGHT", (long) TCOD_CHAR_COPYRIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_CENT", (long) TCOD_CHAR_CENT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_YEN", (long) TCOD_CHAR_YEN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_CURRENCY", (long) TCOD_CHAR_CURRENCY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_THREE_QUARTERS", (long) TCOD_CHAR_THREE_QUARTERS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_DIVISION", (long) TCOD_CHAR_DIVISION, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_GRADE", (long) TCOD_CHAR_GRADE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_UMLAUT", (long) TCOD_CHAR_UMLAUT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_POW1", (long) TCOD_CHAR_POW1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_POW3", (long) TCOD_CHAR_POW3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_POW2", (long) TCOD_CHAR_POW2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CHAR_BULLET_SQUARE", (long) TCOD_CHAR_BULLET_SQUARE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_NONE", (long) TCOD_BKGND_NONE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_SET", (long) TCOD_BKGND_SET, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_MULTIPLY", (long) TCOD_BKGND_MULTIPLY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_LIGHTEN", (long) TCOD_BKGND_LIGHTEN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_DARKEN", (long) TCOD_BKGND_DARKEN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_SCREEN", (long) TCOD_BKGND_SCREEN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_COLOR_DODGE", (long) TCOD_BKGND_COLOR_DODGE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_COLOR_BURN", (long) TCOD_BKGND_COLOR_BURN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_ADD", (long) TCOD_BKGND_ADD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_ADDA", (long) TCOD_BKGND_ADDA, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_BURN", (long) TCOD_BKGND_BURN, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_OVERLAY", (long) TCOD_BKGND_OVERLAY, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_ALPH", (long) TCOD_BKGND_ALPH, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_BKGND_DEFAULT", (long) TCOD_BKGND_DEFAULT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_KEY_PRESSED", (long) TCOD_KEY_PRESSED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_KEY_RELEASED", (long) TCOD_KEY_RELEASED, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_FONT_LAYOUT_ASCII_INCOL", (long) TCOD_FONT_LAYOUT_ASCII_INCOL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_FONT_LAYOUT_ASCII_INROW", (long) TCOD_FONT_LAYOUT_ASCII_INROW, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_FONT_TYPE_GREYSCALE", (long) TCOD_FONT_TYPE_GREYSCALE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_FONT_TYPE_GRAYSCALE", (long) TCOD_FONT_TYPE_GRAYSCALE, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_FONT_LAYOUT_TCOD", (long) TCOD_FONT_LAYOUT_TCOD, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_RENDERER_GLSL", (long) TCOD_RENDERER_GLSL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_RENDERER_OPENGL", (long) TCOD_RENDERER_OPENGL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_RENDERER_SDL", (long) TCOD_RENDERER_SDL, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_NB_RENDERERS", (long) TCOD_NB_RENDERERS, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_LEFT", (long) TCOD_LEFT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_RIGHT", (long) TCOD_RIGHT, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_CENTER", (long) TCOD_CENTER, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_NOISE_MAX_OCTAVES", (long) 128, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"TCOD_NOISE_MAX_DIMENSIONS", (long) 4, 0, 0, 0},
{ SWIG_LUA_FLOAT,   (char *)"TCOD_NOISE_DEFAULT_HURST", 0, (double) 0.5, 0, 0},
{ SWIG_LUA_FLOAT,   (char *)"TCOD_NOISE_DEFAULT_LACUNARITY", 0, (double) 2.0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_LuaLineListenerTo_p_TCODLineListener(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((TCODLineListener *)  ((LuaLineListener *) x));
}
static void *_p_LuaLineListenerTo_p_LuaCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LuaCallback *)  ((LuaLineListener *) x));
}
static void *_p_LuaPathCallbackTo_p_LuaCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((LuaCallback *)  ((LuaPathCallback *) x));
}
static void *_p_LuaPathCallbackTo_p_ITCODPathCallback(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ITCODPathCallback *)  ((LuaPathCallback *) x));
}
static swig_type_info _swigt__p_ITCODBspCallback = {"_p_ITCODBspCallback", "ITCODBspCallback *", 0, 0, (void*)&_wrap_class_ITCODBspCallback, 0};
static swig_type_info _swigt__p_ITCODPathCallback = {"_p_ITCODPathCallback", "ITCODPathCallback *", 0, 0, (void*)&_wrap_class_ITCODPathCallback, 0};
static swig_type_info _swigt__p_LuaCallback = {"_p_LuaCallback", "LuaCallback *", 0, 0, (void*)&_wrap_class_LuaCallback, 0};
static swig_type_info _swigt__p_LuaLineListener = {"_p_LuaLineListener", "LuaLineListener *", 0, 0, (void*)&_wrap_class_LuaLineListener, 0};
static swig_type_info _swigt__p_LuaPathCallback = {"_p_LuaPathCallback", "LuaPathCallback *", 0, 0, (void*)&_wrap_class_LuaPathCallback, 0};
static swig_type_info _swigt__p_SWIGLUA_REF = {"_p_SWIGLUA_REF", "SWIGLUA_REF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCODBsp = {"_p_TCODBsp", "TCODBsp *", 0, 0, (void*)&_wrap_class_TCODBsp, 0};
static swig_type_info _swigt__p_TCODCBackgroundHelpers = {"_p_TCODCBackgroundHelpers", "TCODCBackgroundHelpers *", 0, 0, (void*)&_wrap_class_TCODCBackgroundHelpers, 0};
static swig_type_info _swigt__p_TCODColor = {"_p_TCODColor", "TCODColor *", 0, 0, (void*)&_wrap_class_TCODColor, 0};
static swig_type_info _swigt__p_TCODConsole = {"_p_TCODConsole", "TCODConsole *", 0, 0, (void*)&_wrap_class_TCODConsole, 0};
static swig_type_info _swigt__p_TCODDijkstra = {"_p_TCODDijkstra", "TCODDijkstra *", 0, 0, (void*)&_wrap_class_TCODDijkstra, 0};
static swig_type_info _swigt__p_TCODHeightMap = {"_p_TCODHeightMap", "TCODHeightMap *", 0, 0, (void*)&_wrap_class_TCODHeightMap, 0};
static swig_type_info _swigt__p_TCODImage = {"_p_TCODImage", "TCODImage *", 0, 0, (void*)&_wrap_class_TCODImage, 0};
static swig_type_info _swigt__p_TCODLine = {"_p_TCODLine", "TCODLine *", 0, 0, (void*)&_wrap_class_TCODLine, 0};
static swig_type_info _swigt__p_TCODLineListener = {"_p_TCODLineListener", "TCODLineListener *", 0, 0, (void*)&_wrap_class_TCODLineListener, 0};
static swig_type_info _swigt__p_TCODMap = {"_p_TCODMap", "TCODMap *", 0, 0, (void*)&_wrap_class_TCODMap, 0};
static swig_type_info _swigt__p_TCODMouse = {"_p_TCODMouse", "TCODMouse *", 0, 0, (void*)&_wrap_class_TCODMouse, 0};
static swig_type_info _swigt__p_TCODNameGenerator = {"_p_TCODNameGenerator", "TCODNameGenerator *", 0, 0, (void*)&_wrap_class_TCODNameGenerator, 0};
static swig_type_info _swigt__p_TCODNoise = {"_p_TCODNoise", "TCODNoise *", 0, 0, (void*)&_wrap_class_TCODNoise, 0};
static swig_type_info _swigt__p_TCODPath = {"_p_TCODPath", "TCODPath *", 0, 0, (void*)&_wrap_class_TCODPath, 0};
static swig_type_info _swigt__p_TCODRandom = {"_p_TCODRandom", "TCODRandom *", 0, 0, (void*)&_wrap_class_TCODRandom, 0};
static swig_type_info _swigt__p_TCODSystem = {"_p_TCODSystem", "TCODSystem *", 0, 0, (void*)&_wrap_class_TCODSystem, 0};
static swig_type_info _swigt__p_TCODText = {"_p_TCODText", "TCODText *", 0, 0, (void*)&_wrap_class_TCODText, 0};
static swig_type_info _swigt__p_TCOD_alignment_t = {"_p_TCOD_alignment_t", "enum TCOD_alignment_t *|TCOD_alignment_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCOD_bkgnd_flag_t = {"_p_TCOD_bkgnd_flag_t", "enum TCOD_bkgnd_flag_t *|TCOD_bkgnd_flag_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCOD_chars_t = {"_p_TCOD_chars_t", "enum TCOD_chars_t *|TCOD_chars_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCOD_dice_t = {"_p_TCOD_dice_t", "TCOD_dice_t *", 0, 0, (void*)&_wrap_class_TCOD_dice_t, 0};
static swig_type_info _swigt__p_TCOD_distribution_t = {"_p_TCOD_distribution_t", "enum TCOD_distribution_t *|TCOD_distribution_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCOD_font_flags_t = {"_p_TCOD_font_flags_t", "enum TCOD_font_flags_t *|TCOD_font_flags_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCOD_fov_algorithm_t = {"_p_TCOD_fov_algorithm_t", "enum TCOD_fov_algorithm_t *|TCOD_fov_algorithm_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCOD_key_status_t = {"_p_TCOD_key_status_t", "enum TCOD_key_status_t *|TCOD_key_status_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCOD_key_t = {"_p_TCOD_key_t", "TCOD_key_t *", 0, 0, (void*)&_wrap_class_TCOD_key_t, 0};
static swig_type_info _swigt__p_TCOD_keycode_t = {"_p_TCOD_keycode_t", "enum TCOD_keycode_t *|TCOD_keycode_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCOD_mouse_t = {"_p_TCOD_mouse_t", "TCOD_mouse_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCOD_noise_type_t = {"_p_TCOD_noise_type_t", "TCOD_noise_type_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCOD_random_algo_t = {"_p_TCOD_random_algo_t", "enum TCOD_random_algo_t *|TCOD_random_algo_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TCOD_renderer_t = {"_p_TCOD_renderer_t", "enum TCOD_renderer_t *|TCOD_renderer_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_p_t = {"_p_std__vectorT_char_p_t", "std::vector< char * > *", 0, 0, (void*)&_wrap_class_std_vector_Sl_char_Sm__Sg_, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32 *|unsigned int *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ITCODBspCallback,
  &_swigt__p_ITCODPathCallback,
  &_swigt__p_LuaCallback,
  &_swigt__p_LuaLineListener,
  &_swigt__p_LuaPathCallback,
  &_swigt__p_SWIGLUA_REF,
  &_swigt__p_TCODBsp,
  &_swigt__p_TCODCBackgroundHelpers,
  &_swigt__p_TCODColor,
  &_swigt__p_TCODConsole,
  &_swigt__p_TCODDijkstra,
  &_swigt__p_TCODHeightMap,
  &_swigt__p_TCODImage,
  &_swigt__p_TCODLine,
  &_swigt__p_TCODLineListener,
  &_swigt__p_TCODMap,
  &_swigt__p_TCODMouse,
  &_swigt__p_TCODNameGenerator,
  &_swigt__p_TCODNoise,
  &_swigt__p_TCODPath,
  &_swigt__p_TCODRandom,
  &_swigt__p_TCODSystem,
  &_swigt__p_TCODText,
  &_swigt__p_TCOD_alignment_t,
  &_swigt__p_TCOD_bkgnd_flag_t,
  &_swigt__p_TCOD_chars_t,
  &_swigt__p_TCOD_dice_t,
  &_swigt__p_TCOD_distribution_t,
  &_swigt__p_TCOD_font_flags_t,
  &_swigt__p_TCOD_fov_algorithm_t,
  &_swigt__p_TCOD_key_status_t,
  &_swigt__p_TCOD_key_t,
  &_swigt__p_TCOD_keycode_t,
  &_swigt__p_TCOD_mouse_t,
  &_swigt__p_TCOD_noise_type_t,
  &_swigt__p_TCOD_random_algo_t,
  &_swigt__p_TCOD_renderer_t,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_std__vectorT_char_p_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
};

static swig_cast_info _swigc__p_ITCODBspCallback[] = {  {&_swigt__p_ITCODBspCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ITCODPathCallback[] = {  {&_swigt__p_ITCODPathCallback, 0, 0, 0},  {&_swigt__p_LuaPathCallback, _p_LuaPathCallbackTo_p_ITCODPathCallback, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaCallback[] = {  {&_swigt__p_LuaLineListener, _p_LuaLineListenerTo_p_LuaCallback, 0, 0},  {&_swigt__p_LuaCallback, 0, 0, 0},  {&_swigt__p_LuaPathCallback, _p_LuaPathCallbackTo_p_LuaCallback, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaLineListener[] = {  {&_swigt__p_LuaLineListener, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LuaPathCallback[] = {  {&_swigt__p_LuaPathCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SWIGLUA_REF[] = {  {&_swigt__p_SWIGLUA_REF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODBsp[] = {  {&_swigt__p_TCODBsp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODCBackgroundHelpers[] = {  {&_swigt__p_TCODCBackgroundHelpers, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODColor[] = {  {&_swigt__p_TCODColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODConsole[] = {  {&_swigt__p_TCODConsole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODDijkstra[] = {  {&_swigt__p_TCODDijkstra, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODHeightMap[] = {  {&_swigt__p_TCODHeightMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODImage[] = {  {&_swigt__p_TCODImage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODLine[] = {  {&_swigt__p_TCODLine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODLineListener[] = {  {&_swigt__p_TCODLineListener, 0, 0, 0},  {&_swigt__p_LuaLineListener, _p_LuaLineListenerTo_p_TCODLineListener, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODMap[] = {  {&_swigt__p_TCODMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODMouse[] = {  {&_swigt__p_TCODMouse, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODNameGenerator[] = {  {&_swigt__p_TCODNameGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODNoise[] = {  {&_swigt__p_TCODNoise, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODPath[] = {  {&_swigt__p_TCODPath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODRandom[] = {  {&_swigt__p_TCODRandom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODSystem[] = {  {&_swigt__p_TCODSystem, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCODText[] = {  {&_swigt__p_TCODText, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_alignment_t[] = {  {&_swigt__p_TCOD_alignment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_bkgnd_flag_t[] = {  {&_swigt__p_TCOD_bkgnd_flag_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_chars_t[] = {  {&_swigt__p_TCOD_chars_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_dice_t[] = {  {&_swigt__p_TCOD_dice_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_distribution_t[] = {  {&_swigt__p_TCOD_distribution_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_font_flags_t[] = {  {&_swigt__p_TCOD_font_flags_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_fov_algorithm_t[] = {  {&_swigt__p_TCOD_fov_algorithm_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_key_status_t[] = {  {&_swigt__p_TCOD_key_status_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_key_t[] = {  {&_swigt__p_TCOD_key_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_keycode_t[] = {  {&_swigt__p_TCOD_keycode_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_mouse_t[] = {  {&_swigt__p_TCOD_mouse_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_noise_type_t[] = {  {&_swigt__p_TCOD_noise_type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_random_algo_t[] = {  {&_swigt__p_TCOD_random_algo_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TCOD_renderer_t[] = {  {&_swigt__p_TCOD_renderer_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_p_t[] = {  {&_swigt__p_std__vectorT_char_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ITCODBspCallback,
  _swigc__p_ITCODPathCallback,
  _swigc__p_LuaCallback,
  _swigc__p_LuaLineListener,
  _swigc__p_LuaPathCallback,
  _swigc__p_SWIGLUA_REF,
  _swigc__p_TCODBsp,
  _swigc__p_TCODCBackgroundHelpers,
  _swigc__p_TCODColor,
  _swigc__p_TCODConsole,
  _swigc__p_TCODDijkstra,
  _swigc__p_TCODHeightMap,
  _swigc__p_TCODImage,
  _swigc__p_TCODLine,
  _swigc__p_TCODLineListener,
  _swigc__p_TCODMap,
  _swigc__p_TCODMouse,
  _swigc__p_TCODNameGenerator,
  _swigc__p_TCODNoise,
  _swigc__p_TCODPath,
  _swigc__p_TCODRandom,
  _swigc__p_TCODSystem,
  _swigc__p_TCODText,
  _swigc__p_TCOD_alignment_t,
  _swigc__p_TCOD_bkgnd_flag_t,
  _swigc__p_TCOD_chars_t,
  _swigc__p_TCOD_dice_t,
  _swigc__p_TCOD_distribution_t,
  _swigc__p_TCOD_font_flags_t,
  _swigc__p_TCOD_fov_algorithm_t,
  _swigc__p_TCOD_key_status_t,
  _swigc__p_TCOD_key_t,
  _swigc__p_TCOD_keycode_t,
  _swigc__p_TCOD_mouse_t,
  _swigc__p_TCOD_noise_type_t,
  _swigc__p_TCOD_random_algo_t,
  _swigc__p_TCOD_renderer_t,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_std__vectorT_char_p_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

